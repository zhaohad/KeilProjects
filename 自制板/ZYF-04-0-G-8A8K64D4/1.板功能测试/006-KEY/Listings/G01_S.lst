C51 COMPILER V9.60.7.0   G01_S                                                             03/02/2024 17:29:31 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE G01_S
OBJECT MODULE PLACED IN .\Objects\G01_S.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\G01_S.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\G01_S.lst) TABS(2) OBJECT(.\Objects\G01_S.obj)

line level    source

   1          #include "G01_S.h"
   2          #include "delay.h"
   3          #include "STC8A_GPIO.h"
   4          
   5          /**
   6            * @brief :NRF24L01初始化
   7            * @param :无
   8            * @note  :无
   9            * @retval:无
  10            */ 
  11          void NRF24L01_Gpio_Init() {
  12   1        //引脚配置 部分51单片机不需要 
  13   1        //CE 配置为输出 IRQ配置为输入
  14   1        RF24L01_CE = 1;
  15   1        RF24L01_CE = 0;       //使能设备
  16   1        RF24L01_IRQ = 1;      //清中断
  17   1        RF24L01_SET_CSN_HIGH();   //取消SPI片选
  18   1      }
  19          
  20          
  21          /**
  22            * @brief :NRF24L01检测
  23            * @param :无
  24            * @note  :无
  25            * @retval:无
  26            */ 
  27          bit NRF24L01_check() {
  28   1        bit exist = 0;
  29   1        uint8_t cnt = 5;
  30   1        uint8_t buf[5] = {0XA5, 0XA5, 0XA5, 0XA5, 0XA5};
  31   1        uint8_t read_buf[5] = {0};
  32   1         
  33   1        while(cnt--) {
  34   2          uint8_t i;
  35   2          NRF24L01_Write_Buf(TX_ADDR, buf, 5); //写入5个字节的地址
  36   2          NRF24L01_Read_Buf(TX_ADDR, read_buf, 5); //读出写入的地址  
  37   2          for(i = 0; i < 5; i++) {
  38   3            if(buf[i] != read_buf[i]) {
  39   4              break; //读出的值和写入的置不同
  40   4            } 
  41   3          }
  42   2      
  43   2          if(5 == i) {
  44   3            exist = 1;
  45   3            break; //读出的字符串与写入的字符串相同，判断为设备存在
  46   3          }
  47   2          delay_ms(500);//500MS检测一次
  48   2        }
  49   1        return exist;
  50   1      }
  51          
  52          
  53          /**
  54            * @brief :NRF24L01写指定长度的数据
C51 COMPILER V9.60.7.0   G01_S                                                             03/02/2024 17:29:31 PAGE 2   

  55            * @param :
  56            *     @reg:地址
  57            *     @pBuf:写入的数据地址
  58            *     @len:数据长度
  59            * @note  :数据长度不超过255，地址在设备中有效
  60            * @retval:写状态
  61            */
  62          void NRF24L01_Write_Buf(uint8_t RegAddr, uint8_t * pBuf, uint8_t len) {
  63   1        uint8_t i;
  64   1        RF24L01_SET_CSN_LOW(); //片选
  65   1        
  66   1        spi_read_write_byte(NRF_WRITE_REG | RegAddr); //写命令 地址
  67   1        for(i = 0; i < len; i++) {
  68   2          spi_read_write_byte(*(pBuf + i)); //写数据
  69   2        }
  70   1          
  71   1        RF24L01_SET_CSN_HIGH(); //取消片选
  72   1      }
  73          
  74          
  75          /**
  76            * @brief :NRF24L01读指定长度的数据
  77            * @param :
  78            *     @reg:地址
  79            *     @pBuf:数据存放地址
  80            *     @len:数据长度
  81            * @note  :数据长度不超过255，地址在设备中有效
  82            * @retval:读取状态
  83            */
  84          void NRF24L01_Read_Buf(uint8_t RegAddr, uint8_t *pBuf, uint8_t len) {
  85   1          uint8_t btmp;
  86   1        
  87   1          RF24L01_SET_CSN_LOW(); //片选
  88   1        
  89   1          spi_read_write_byte(NRF_READ_REG | RegAddr); //读命令 地址
  90   1          for(btmp = 0; btmp < len; btmp++) {
  91   2            *(pBuf + btmp) = spi_read_write_byte(0xFF); //读数据
  92   2          }
  93   1          RF24L01_SET_CSN_HIGH(); //取消片选
  94   1      }
  95          
  96           /**
  97            * @brief :RF24L01模块初始化
  98            * @param :无
  99            * @note  :无
 100            * @retval:无
 101            */
 102          void RF24L01_Init() {
 103   1        uint8_t addr[5] = {INIT_ADDR};
 104   1        RF24L01_SET_CE_HIGH();
 105   1        NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 106   1      
 107   1        NRF24L01_Write_Reg(DYNPD, (1 << 0)); //使能通道1动态数据长度
 108   1        NRF24L01_Write_Reg(FEATRUE, 0x07);
 109   1        NRF24L01_Read_Reg(DYNPD);
 110   1        NRF24L01_Read_Reg(FEATRUE);
 111   1      
 112   1        NRF24L01_Write_Reg(CONFIG, /*(1<<MASK_RX_DR) |*/  //接收中断
 113   1                                     (1 << EN_CRC)   //使能CRC 1个字节
 114   1                                   | (1 << PWR_UP)); //开启设备
 115   1        NRF24L01_Write_Reg(EN_AA, (1 << ENAA_P0)); //通道0自动应答
 116   1        NRF24L01_Write_Reg(EN_RXADDR, (1 << ERX_P0)); //通道0接收
C51 COMPILER V9.60.7.0   G01_S                                                             03/02/2024 17:29:31 PAGE 3   

 117   1        NRF24L01_Write_Reg(SETUP_AW, AW_5BYTES); //地址宽度 5个字节
 118   1        NRF24L01_Write_Reg(SETUP_RETR, ARD_4000US
 119   1                        | (REPEAT_CNT & 0x0F)); //重复等待时间 250us
 120   1        NRF24L01_Write_Reg(RF_CH, 60); //初始化通道
 121   1        NRF24L01_Write_Reg(RF_SETUP, 0x26);
 122   1      
 123   1        NRF24L01_Set_TxAddr(&addr[0], 5); //设置TX地址
 124   1        NRF24L01_Set_RxAddr(0, &addr[0], 5); //设置RX地址
 125   1      }
 126          
 127          /**
 128            * @brief :NRF24L01清中断
 129            * @param :
 130                     @IRQ_Source:中断源
 131            * @note  :无
 132            * @retval:清除后状态寄存器的值
 133            */
 134          uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source) {
 135   1        uint8_t btmp = 0;
 136   1      
 137   1        IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); //中断标志处理
 138   1        btmp = NRF24L01_Read_Status_Register(); //读状态寄存器
 139   1      
 140   1        RF24L01_SET_CSN_LOW();      //片选
 141   1        spi_read_write_byte(NRF_WRITE_REG + STATUS); //写状态寄存器命令
 142   1        spi_read_write_byte(IRQ_Source | btmp); //清相应中断标志
 143   1        RF24L01_SET_CSN_HIGH(); //取消片选
 144   1        
 145   1        return (NRF24L01_Read_Status_Register()); //返回状态寄存器状态
 146   1      }
 147          
 148          /**
 149            * @brief :NRF24L01读状态寄存器
 150            * @param :无
 151            * @note  :无
 152            * @retval:RF24L01状态
 153            */
 154          uint8_t NRF24L01_Read_Status_Register() {
 155   1        uint8_t Status;
 156   1        RF24L01_SET_CSN_LOW(); //片选
 157   1        Status = spi_read_write_byte(NRF_READ_REG + STATUS); //读状态寄存器
 158   1        RF24L01_SET_CSN_HIGH(); //取消片选
 159   1        return Status;
 160   1      }
 161          
 162          /**
 163            * @brief :NRF24L01写寄存器
 164            * @param :无
 165            * @note  :地址在设备中有效
 166            * @retval:读写状态
 167            */
 168          void NRF24L01_Write_Reg(uint8_t RegAddr, uint8_t Value) {
 169   1        RF24L01_SET_CSN_LOW( ); //片选
 170   1        spi_read_write_byte(NRF_WRITE_REG | RegAddr); //写命令 地址
 171   1        spi_read_write_byte(Value); //写数据
 172   1        RF24L01_SET_CSN_HIGH(); //取消片选
 173   1      }
 174          
 175          /**
 176            * @brief :NRF24L01读寄存器
 177            * @param :
 178                     @Addr:寄存器地址
C51 COMPILER V9.60.7.0   G01_S                                                             03/02/2024 17:29:31 PAGE 4   

 179            * @note  :地址在设备中有效
 180            * @retval:读取的数据
 181            */
 182          uint8_t NRF24L01_Read_Reg(uint8_t RegAddr) {
 183   1        uint8_t btmp;
 184   1        RF24L01_SET_CSN_LOW(); //片选
 185   1        spi_read_write_byte(NRF_READ_REG | RegAddr); //读命令 地址
 186   1        btmp = spi_read_write_byte(0xFF); //读数据
 187   1        RF24L01_SET_CSN_HIGH( ); //取消片选
 188   1        return btmp;
 189   1      }
 190          
 191           /**
 192            * @brief :设置发送地址
 193            * @param :
 194            *     @pAddr:地址存放地址
 195            *     @len:长度
 196            * @note  :无
 197            * @retval:无
 198            */
 199          void NRF24L01_Set_TxAddr(uint8_t *pAddr, uint8_t len) {
 200   1        len = (len > 5) ? 5 : len; //地址不能大于5个字节
 201   1        NRF24L01_Write_Buf(TX_ADDR, pAddr, len); //写地址
 202   1      }
 203          
 204           /**
 205            * @brief :设置接收通道地址
 206            * @param :
 207            *     @PipeNum:通道
 208            *     @pAddr:地址存肥着地址
 209            *     @Len:长度
 210            * @note  :通道不大于5 地址长度不大于5个字节
 211            * @retval:无
 212            */
 213          void NRF24L01_Set_RxAddr(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len) {
 214   1        Len = (Len > 5) ? 5 : Len;
 215   1        PipeNum = (PipeNum > 5) ? 5 : PipeNum; //通道不大于5 地址长度不大于5个字节
 216   1        NRF24L01_Write_Buf(RX_ADDR_P0 + PipeNum, pAddr, Len ); //写入地址
 217   1      }
 218          
 219           /**
 220            * @brief :设置模式
 221            * @param :
 222            *     @Mode:模式发送模式或接收模式
 223            * @note  :无
 224            * @retval:无
 225            */
 226          void RF24L01_Set_Mode(nRf24l01ModeType Mode) {
 227   1        uint8_t controlreg = 0;
 228   1        controlreg = NRF24L01_Read_Reg(CONFIG);
 229   1        if (Mode == MODE_TX) {
 230   2          controlreg &= ~(1<< PRIM_RX);
 231   2        } else if (Mode == MODE_RX) { 
 232   2          controlreg |= (1 << PRIM_RX); 
 233   2        }
 234   1        NRF24L01_Write_Reg(CONFIG, controlreg);
 235   1      }
 236          
 237          /**
 238            * @brief :NRF24L01发送一次数据
 239            * @param :
 240            *     @txbuf:待发送数据首地址
C51 COMPILER V9.60.7.0   G01_S                                                             03/02/2024 17:29:31 PAGE 5   

 241            *     @Length:发送数据长度
 242            * @note  :无
 243            * @retval:
 244            *     MAX_TX：达到最大重发次数
 245            *     TX_OK：发送完成
 246            *     0xFF:其他原因
 247            */ 
 248          uint8_t NRF24L01_TxPacket(uint8_t * txbuf, uint8_t Length) {
 249   1        uint8_t l_Status = 0;
 250   1        uint16_t l_MsTimes = 0;
 251   1      
 252   1        RF24L01_SET_CSN_LOW(); //片选
 253   1        spi_read_write_byte(FLUSH_TX);
 254   1        RF24L01_SET_CSN_HIGH();
 255   1      
 256   1        RF24L01_SET_CE_LOW();   
 257   1        NRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, Length); //写数据到TX BUF 32字节  TX_PLOAD_WIDTH
 258   1        RF24L01_SET_CE_HIGH(); //启动发送
 259   1        while(0 != RF24L01_GET_IRQ_STATUS()) {
 260   2          delay_ms(1);
 261   2          if(500 == l_MsTimes++) { //500ms还没有发送成功，重新初始化设备
 262   3            NRF24L01_Gpio_Init();
 263   3            RF24L01_Init();
 264   3            RF24L01_Set_Mode( MODE_TX );
 265   3            break;
 266   3          }
 267   2        }
 268   1        l_Status = NRF24L01_Read_Reg(STATUS); //读状态寄存器
 269   1        NRF24L01_Write_Reg(STATUS, l_Status); //清除TX_DS或MAX_RT中断标志
 270   1        
 271   1        if(l_Status & MAX_TX) { //达到最大重发次数
 272   2          NRF24L01_Write_Reg( FLUSH_TX,0xff ); //清除TX FIFO寄存器
 273   2          return MAX_TX;
 274   2        }
 275   1      
 276   1        if(l_Status & TX_OK) { //发送完成
 277   2          return TX_OK;
 278   2        }
 279   1      
 280   1        return 0xFF;  //其他原因发送失败
 281   1      }
 282          
 283          /**
 284            * @brief :NRF24L01接收数据
 285            * @param :
 286            *     @rxbuf:接收数据存放地址
 287            * @note  :无
 288            * @retval:
 289            *     0:接收完成
 290            *     1:没有接收到数据
 291            */ 
 292          uint8_t NRF24L01_RxPacket(uint8_t *rxbuf) {
 293   1        uint8_t l_Status = 0, l_RxLength = 0, l_100MsTimes = 0;
 294   1        
 295   1        RF24L01_SET_CSN_LOW(); //片选
 296   1        spi_read_write_byte(FLUSH_RX);
 297   1        RF24L01_SET_CSN_HIGH();
 298   1        
 299   1        while(0 != RF24L01_GET_IRQ_STATUS()) {
 300   2          delay_ms(100);
 301   2      
 302   2          if(30 == l_100MsTimes++) { //3s没接收过数据，重新初始化模块
C51 COMPILER V9.60.7.0   G01_S                                                             03/02/2024 17:29:31 PAGE 6   

 303   3            NRF24L01_Gpio_Init();
 304   3            RF24L01_Init();
 305   3            RF24L01_Set_Mode(MODE_RX);
 306   3            break;
 307   3          }
 308   2        }
 309   1        
 310   1        l_Status = NRF24L01_Read_Reg(STATUS); //读状态寄存器
 311   1        NRF24L01_Write_Reg(STATUS, l_Status); //清中断标志
 312   1        if(l_Status & RX_OK) { //接收到数据
 313   2          l_RxLength = NRF24L01_Read_Reg(R_RX_PL_WID); //读取接收到的数据个数
 314   2          NRF24L01_Read_Buf(RD_RX_PLOAD, rxbuf, l_RxLength ); //接收到数据 
 315   2          NRF24L01_Write_Reg(FLUSH_RX, 0xff);       //清除RX FIFO
 316   2          return l_RxLength;
 317   2        } 
 318   1      
 319   1        return 0;       //没有收到数据  
 320   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    760    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      51
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
