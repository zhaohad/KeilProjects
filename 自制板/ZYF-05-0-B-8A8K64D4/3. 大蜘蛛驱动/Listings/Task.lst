C51 COMPILER V9.60.0.0   TASK                                                              08/14/2022 19:21:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TASK
OBJECT MODULE PLACED IN .\Objects\Task.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE src\Task.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -Task.lst) TABS(2) OBJECT(.\Objects\Task.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "Task.h"
  14          #include  "app.h"
  15          
  16          //========================================================================
  17          //                               本地变量声明
  18          //========================================================================
  19          
  20          static TASK_COMPONENTS Task_Comps[]=
  21          {
  22          //状态  计数  周期  函数
  23          //  {0, 250, 250, Sample_Lamp},       /* task 1 Period： 250ms */
  24          //  {0, 200, 200, Sample_ADtoUART},   /* task 2 Period： 200ms */
  25          //  {0, 20, 20, Sample_INTtoUART},    /* task 3 Period： 20ms */
  26          //  {0, 1, 1, Sample_RTC},            /* task 4 Period： 1ms */
  27          //  {0, 1, 1, Sample_I2C_PS},         /* task 5 Period： 1ms */
  28          //  {0, 1, 1, Sample_SPI_PS},         /* task 6 Period： 1ms */
  29          //  {0, 1, 1, Sample_EEPROM},         /* task 7 Period： 1ms */
  30          //  {0, 100, 100, Sample_WDT},        /* task 8 Period： 100ms */
  31          //  {0, 10, 10, Sample_PCA_PWM},      /* task 9 Period： 10ms */
  32          //  {0, 1, 1, Sample_PCA_Capture},    /* task 10 Period： 1ms */
  33          //  {0, 1, 1, Sample_PWM15bit},       /* task 11 Period： 1ms */
  34          //  {0, 500, 500, Sample_BMM_AD},     /* task 12 Period： 500ms */
  35          //  {0, 500, 500, Sample_BMM_M2M},    /* task 13 Period： 100ms */
  36          //  {0, 1, 1, Sample_BMM_UART},       /* task 14 Period： 1ms */
  37          //  {0, 1, 1, Sample_BMM_SPI_PS},     /* task 15 Period： 1ms */
  38            {0, 1, 1, Sample_BMM_LCM},        /* task 16 Period： 1ms */
  39            /* Add new task here */
  40          };
  41          
  42          u8 Tasks_Max = sizeof(Task_Comps)/sizeof(Task_Comps[0]);
  43          
  44          //========================================================================
  45          // 函数: Task_Handler_Callback
  46          // 描述: 任务标记回调函数.
  47          // 参数: None.
  48          // 返回: None.
  49          // 版本: V1.0, 2012-10-22
  50          //========================================================================
  51          void Task_Marks_Handler_Callback(void)
  52          {
  53   1        u8 i;
  54   1        for(i=0; i<Tasks_Max; i++)
C51 COMPILER V9.60.0.0   TASK                                                              08/14/2022 19:21:59 PAGE 2   

  55   1        {
  56   2          if(Task_Comps[i].TIMCount)    /* If the time is not 0 */
  57   2          {
  58   3            Task_Comps[i].TIMCount--;  /* Time counter decrement */
  59   3            if(Task_Comps[i].TIMCount == 0)  /* If time arrives */
  60   3            {
  61   4              /*Resume the timer value and try again */
  62   4              Task_Comps[i].TIMCount = Task_Comps[i].TRITime;  
  63   4              Task_Comps[i].Run = 1;    /* The task can be run */
  64   4            }
  65   3          }
  66   2        }
  67   1      }
  68          
  69          //========================================================================
  70          // 函数: Task_Pro_Handler_Callback
  71          // 描述: 任务处理回调函数.
  72          // 参数: None.
  73          // 返回: None.
  74          // 版本: V1.0, 2012-10-22
  75          //========================================================================
  76          void Task_Pro_Handler_Callback(void)
  77          {
  78   1        u8 i;
  79   1        for(i=0; i<Tasks_Max; i++)
  80   1        {
  81   2          if(Task_Comps[i].Run) /* If task can be run */
  82   2          {
  83   3            Task_Comps[i].Run = 0;    /* Flag clear 0 */
  84   3            Task_Comps[i].TaskHook();  /* Run task */
  85   3          }
  86   2        }
  87   1      }
  88          
  89          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    132    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
