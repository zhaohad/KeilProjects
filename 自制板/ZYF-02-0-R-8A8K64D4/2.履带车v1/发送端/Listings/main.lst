C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 21:07:59 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc8a8k64d4.H"
   2          #include "stc8a_gpio.H"
   3          #include "stc8a_spi.h"
   4          #include "stc8a_nvic.h"
   5          #include "typedef.h"
   6          #include "oled12864.h"
   7          #include "uart.h"
   8          #include "stc8a_adc.h"
   9          #include "stc8a_switch.h"
  10          #include "dtos.h"
  11          #include "G01_S.h"
  12          #include "command.h"
  13          
  14          
  15          bit g_Rec = 0;
  16          bit g_Mode = MODE_LVDAI;
  17          xdata u8 g_sendBuf[18];
  18          
  19          void OLED_GPIO_Config() {
  20   1        xdata GPIO_InitTypeDef conf;
  21   1        conf.Mode = GPIO_PullUp;
  22   1        conf.Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
  23   1        GPIO_Inilize(GPIO_P1, &conf);
  24   1        
  25   1        conf.Pin = GPIO_Pin_4;
  26   1        GPIO_Inilize(GPIO_P4, &conf);
  27   1      }
  28          
  29          void OLED12864_Init() {
  30   1        OLED_GPIO_Config();
  31   1        OLED_Init();
  32   1      }
  33          
  34          void MOTOR_GPIO_Config() {
  35   1        xdata GPIO_InitTypeDef conf;
  36   1        // conf.Mode = GPIO_OUT_PP;
  37   1        conf.Mode = GPIO_PullUp;
  38   1        conf.Pin = GPIO_Pin_All;
  39   1        GPIO_Inilize(GPIO_P6, &conf);
  40   1        
  41   1        conf.Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
  42   1        GPIO_Inilize(GPIO_P7, &conf);
  43   1        
  44   1        conf.Pin = GPIO_Pin_0;
  45   1        GPIO_Inilize(GPIO_P2, &conf);
  46   1        
  47   1        conf.Pin = GPIO_Pin_0;
  48   1        GPIO_Inilize(GPIO_P4, &conf);
  49   1      }
  50          
  51          void KEY_GPIO_Config() {
  52   1        xdata GPIO_InitTypeDef conf;
  53   1        conf.Mode = GPIO_PullUp;
  54   1        conf.Pin = GPIO_Pin_5;
C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 21:07:59 PAGE 2   

  55   1        GPIO_Inilize(GPIO_P5, &conf);
  56   1      
  57   1        conf.Pin = GPIO_Pin_1;
  58   1        GPIO_Inilize(GPIO_P4, &conf);
  59   1      
  60   1        conf.Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
  61   1        GPIO_Inilize(GPIO_P7, &conf);
  62   1      }
  63          
  64          void ADC_Init(void) {
  65   1        xdata ADC_InitTypeDef ADC_InitStructure;    //结构定义
  66   1        ADC_InitStructure.ADC_SMPduty = 31;   //ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10
             -）
  67   1        ADC_InitStructure.ADC_CsSetup = 0;    //ADC 通道选择时间控制 0(默认),1
  68   1        ADC_InitStructure.ADC_CsHold = 1;   //ADC 通道选择保持时间控制 0,1(默认),2,3
  69   1        ADC_InitStructure.ADC_Speed = ADC_SPEED_2X1T;   //设置 ADC 工作时钟频率 ADC_SPEED_2X1T~ADC_SPEED_2X16T
  70   1        ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;  //ADC结果调整,  ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIF
             -IED
  71   1        ADC_Inilize(&ADC_InitStructure);    //初始化
  72   1        ADC_PowerControl(ENABLE);           //ADC电源开关, ENABLE或DISABLE
  73   1        // NVIC_ADC_Init(DISABLE, Priority_0);    //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  74   1      }
  75          
  76          void showBootIMG() {
  77   1        u8 i;
  78   1        OLED_ShowBootIMG();
  79   1        for (i = 0; i < 5; ++i) {
  80   2          delay_ms(255);
  81   2        }
  82   1        OLED_Clear();
  83   1      }
  84          
  85          void main() {
  86   1        xdata u8 outL = 0;
  87   1        bit exist;
  88   1        ADC_Init();
  89   1        OLED12864_Init();
  90   1        showBootIMG();
  91   1      
  92   1        NRF24L01_GPIO_config();
  93   1        NRF24L01_Gpio_Init();
  94   1      
  95   1        OLED_ShowString8(0, 0, "CHECK MODULE...");
  96   1        exist = NRF24L01_check();
  97   1        
  98   1        exist = NRF24L01_check();
  99   1        if (exist) {
 100   2          OLED_ShowString8(0, outL, "G01-S Online");
 101   2        } else {
 102   2          OLED_ShowString8(0, outL, "G01-S Offline");
 103   2          while (1);
 104   2        }
 105   1        outL++;
 106   1        
 107   1        RF24L01_Init();
 108   1        _nop_();_nop_();_nop_();_nop_();_nop_();
 109   1      
 110   1        if (g_Rec) {
 111   2          OLED_ShowString8(0, outL, "Set MODE_RX");
 112   2          RF24L01_Set_Mode(MODE_RX); //接收模式
 113   2          _nop_();_nop_();_nop_();_nop_();_nop_();
C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 21:07:59 PAGE 3   

 114   2        } else {
 115   2          OLED_ShowString8(0, outL, "Set MODE_TX");
 116   2          RF24L01_Set_Mode(MODE_TX); //发送模式
 117   2          _nop_();_nop_();_nop_();_nop_();_nop_();
 118   2        }
 119   1        outL++;
 120   1        OLED_Clear();
 121   1      
 122   1        while(1) {
 123   2          xdata u16 adc;
 124   2          xdata u8 adcV1, adcV2, adcV3, adcV4;
 125   2          xdata u8 strP[10];
 126   2          xdata u8 strD[20];
 127   2          outL = 0;
 128   2      
 129   2          adc = Get_ADCResult(CHANEL_ADC1);
 130   2          adcV1 = (u8) (adc / 4096.f * 100.f);
 131   2          uintToS(adcV1, strP, 10);
 132   2          sprintf(strD, "CHANEL1: %s", strP);
 133   2          // OLED_ShowString8(0, outL, strD);
 134   2          outL++;
 135   2      
 136   2          adc = Get_ADCResult(CHANEL_ADC2);
 137   2          adcV2 = (u8) (adc / 4096.f * 100.f);
 138   2          uintToS(adcV2, strP, 10);
 139   2          sprintf(strD, "CHANEL2: %s", strP);
 140   2          // OLED_ShowString8(0, outL, strD);
 141   2          outL++;
 142   2      
 143   2          adc = Get_ADCResult(CHANEL_ADC3);
 144   2          adcV3 = (u8) (adc / 4096.f * 100.f);
 145   2          uintToS(adcV3, strP, 10);
 146   2          sprintf(strD, "CHANEL3: %s", strP);
 147   2          // OLED_ShowString8(0, outL, strD);
 148   2          outL++;
 149   2      
 150   2          adc = Get_ADCResult(CHANEL_ADC4);
 151   2          adcV4 = (u8) (adc / 4096.f * 100.f);
 152   2          uintToS(adcV4, strP, 10);
 153   2          sprintf(strD, "CHANEL4: %s", strP);
 154   2          // OLED_ShowString8(0, outL, strD);
 155   2          outL++;
 156   2      
 157   2          {
 158   3            xdata uint8_t sendResult;
 159   3            xdata u8 sendPos = 0;
 160   3            xdata u8 readPos = 0;
 161   3            g_sendBuf[sendPos++] = MODE_COMMAND;
 162   3            g_sendBuf[sendPos++] = g_Mode;
 163   3            g_sendBuf[sendPos++] = ADC_COMMAND_0;
 164   3            g_sendBuf[sendPos++] = adcV1;
 165   3            g_sendBuf[sendPos++] = ADC_COMMAND_1;
 166   3            g_sendBuf[sendPos++] = adcV2;
 167   3            g_sendBuf[sendPos++] = ADC_COMMAND_2;
 168   3            g_sendBuf[sendPos++] = adcV3;
 169   3            g_sendBuf[sendPos++] = ADC_COMMAND_3;
 170   3            g_sendBuf[sendPos++] = adcV4;
 171   3            
 172   3            outL = 0;
 173   3            while (readPos < sendPos) {
 174   4              xdata u8 cmd;
 175   4              xdata u8 value;
C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 21:07:59 PAGE 4   

 176   4              xdata uint8_t s1[10];
 177   4              xdata uint8_t s2[10];
 178   4              xdata uint8_t str[10];
 179   4              cmd = g_sendBuf[readPos++];
 180   4              value = g_sendBuf[readPos++];
 181   4              uintToS(cmd, s1, 10);
 182   4              uintToS(value, s2, 10);
 183   4              sprintf(str, "%s:%s", s1, s2);
 184   4              OLED_ShowString8(0, outL++, str);
 185   4            }
 186   3      
 187   3            sendResult = NRF24L01_TxPacket((uint8_t *) g_sendBuf, sendPos);
 188   3            if (sendResult == TX_OK) {
 189   4              OLED_ShowString8(0, outL++, "SUCCEES");
 190   4            } else {
 191   4              OLED_ShowString8(0, outL++, "Failed");
 192   4            }
 193   3          }
 194   2        }
 195   1      
 196   1        /*while(1) {
 197   1          u8 outLL = outL;
 198   1          xdata uint8_t res;
 199   1          xdata uint8_t tx[1];
 200   1          xdata uint8_t numStr[10];
 201   1          xdata uint8_t str[20];
 202   1      
 203   1          if (g_Rec) {
 204   1            xdata uint8_t rx;
 205   1            xdata uint8_t g_rece[8];
 206   1            u8 i;
 207   1            sprintf(str, "Receiving...");
 208   1            OLED_ShowString8(0, outLL, str);
 209   1            outLL++;
 210   1            rx = NRF24L01_RxPacket(g_rece); //接收字节
 211   1      
 212   1            if (rx != 0) {
 213   1              uintToS(rx, numStr, 10);
 214   1              sprintf(str, "Received: %s   ", numStr);
 215   1              OLED_ShowString8(0, outLL, str);
 216   1              outLL++;
 217   1              
 218   1              sprintf(str, "d: ");
 219   1              for (i = 0; i < rx; ++i) {
 220   1                u8 d = g_rece[i];
 221   1                uintToS(d, numStr, 10);
 222   1                sprintf(str, "%s %s", str, numStr);
 223   1              }
 224   1              sprintf(str, "%s    ", str);
 225   1              OLED_ShowString8(0, outLL, str);
 226   1              outLL++;
 227   1            }
 228   1          } else {
 229   1            tx[0] = someNumber;
 230   1            intToS(tx[0], numStr, 10);
 231   1            sprintf(str, "Sending %s   ", numStr);
 232   1            OLED_ShowString8(0, outLL, str);
 233   1            outLL++;
 234   1            res = NRF24L01_TxPacket((uint8_t *) tx, 1);
 235   1            if (res == TX_OK) {
 236   1              sprintf(str, "SUCCEES");
 237   1            } else {
C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 21:07:59 PAGE 5   

 238   1              sprintf(str, "Failed");
 239   1            }
 240   1            OLED_ShowString8(0, outLL, str);
 241   1            outLL++;
 242   1      
 243   1            someNumber++;
 244   1            if (someNumber > 100) {
 245   1              someNumber = 0;
 246   1            }
 247   1            
 248   1            delay_ms(3000);
 249   1          }
 250   1        }*/
 251   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1200    ----
   CONSTANT SIZE    =    136    ----
   XDATA SIZE       =     18      83
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
