C51 COMPILER V9.60.7.0   MAIN                                                              06/19/2023 01:23:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc8a8k64d4.H"
   2          #include "stc8a_gpio.H"
   3          #include "stc8a_spi.h"
   4          #include "stc8a_nvic.h"
   5          #include "typedef.h"
   6          #include "oled12864.h"
   7          #include "uart.h"
   8          #include "stc8a_adc.h"
   9          #include "stc8a_switch.h"
  10          #include "dtos.h"
  11          #include "G01_S.h"
  12          #include "command.h"
  13          
  14          
  15          bit g_Rec = 1;
  16          bit g_Mode = MODE_LVDAI;
  17          xdata u8 g_recvBuf[18];
  18          
  19          void OLED_GPIO_Config() {
  20   1        xdata GPIO_InitTypeDef conf;
  21   1        conf.Mode = GPIO_PullUp;
  22   1        conf.Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
  23   1        GPIO_Inilize(GPIO_P1, &conf);
  24   1        
  25   1        conf.Pin = GPIO_Pin_4;
  26   1        GPIO_Inilize(GPIO_P4, &conf);
  27   1      }
  28          
  29          void OLED12864_Init() {
  30   1        OLED_GPIO_Config();
  31   1        OLED_Init();
  32   1      }
  33          
  34          void MOTOR_GPIO_Config() {
  35   1        xdata GPIO_InitTypeDef conf;
  36   1        // conf.Mode = GPIO_OUT_PP;
  37   1        conf.Mode = GPIO_PullUp;
  38   1        conf.Pin = GPIO_Pin_All;
  39   1        GPIO_Inilize(GPIO_P6, &conf);
  40   1        
  41   1        conf.Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
  42   1        GPIO_Inilize(GPIO_P7, &conf);
  43   1        
  44   1        conf.Pin = GPIO_Pin_0;
  45   1        GPIO_Inilize(GPIO_P2, &conf);
  46   1        
  47   1        conf.Pin = GPIO_Pin_0;
  48   1        GPIO_Inilize(GPIO_P4, &conf);
  49   1      }
  50          
  51          void KEY_GPIO_Config() {
  52   1        xdata GPIO_InitTypeDef conf;
  53   1        conf.Mode = GPIO_PullUp;
  54   1        conf.Pin = GPIO_Pin_5;
C51 COMPILER V9.60.7.0   MAIN                                                              06/19/2023 01:23:25 PAGE 2   

  55   1        GPIO_Inilize(GPIO_P5, &conf);
  56   1      
  57   1        conf.Pin = GPIO_Pin_1;
  58   1        GPIO_Inilize(GPIO_P4, &conf);
  59   1      
  60   1        conf.Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
  61   1        GPIO_Inilize(GPIO_P7, &conf);
  62   1      }
  63          
  64          void ADC_Init(void) {
  65   1        xdata ADC_InitTypeDef ADC_InitStructure;    //结构定义
  66   1        ADC_InitStructure.ADC_SMPduty = 31;   //ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10
             -）
  67   1        ADC_InitStructure.ADC_CsSetup = 0;    //ADC 通道选择时间控制 0(默认),1
  68   1        ADC_InitStructure.ADC_CsHold = 1;   //ADC 通道选择保持时间控制 0,1(默认),2,3
  69   1        ADC_InitStructure.ADC_Speed = ADC_SPEED_2X1T;   //设置 ADC 工作时钟频率 ADC_SPEED_2X1T~ADC_SPEED_2X16T
  70   1        ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;  //ADC结果调整,  ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIF
             -IED
  71   1        ADC_Inilize(&ADC_InitStructure);    //初始化
  72   1        ADC_PowerControl(ENABLE);           //ADC电源开关, ENABLE或DISABLE
  73   1        // NVIC_ADC_Init(DISABLE, Priority_0);    //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  74   1      }
  75          
  76          void main() {
  77   1        xdata u8 outL = 0;
  78   1        bit exist;
  79   1        OLED12864_Init();
  80   1      
  81   1        NRF24L01_GPIO_config();
  82   1        NRF24L01_Gpio_Init();
  83   1      
  84   1        OLED_ShowString8(0, 0, "CHECK MODULE...");
  85   1        exist = NRF24L01_check();
  86   1        
  87   1        exist = NRF24L01_check();
  88   1        if (exist) {
  89   2          OLED_ShowString8(0, outL, "G01-S Online");
  90   2        } else {
  91   2          OLED_ShowString8(0, outL, "G01-S Offline");
  92   2          while (1);
  93   2        }
  94   1        outL++;
  95   1        
  96   1        RF24L01_Init();
  97   1        _nop_();_nop_();_nop_();_nop_();_nop_();
  98   1      
  99   1        if (g_Rec) {
 100   2          OLED_ShowString8(0, outL, "Set MODE_RX");
 101   2          RF24L01_Set_Mode(MODE_RX); //接收模式
 102   2          _nop_();_nop_();_nop_();_nop_();_nop_();
 103   2        } else {
 104   2          OLED_ShowString8(0, outL, "Set MODE_TX");
 105   2          RF24L01_Set_Mode(MODE_TX); //发送模式
 106   2          _nop_();_nop_();_nop_();_nop_();_nop_();
 107   2        }
 108   1        outL++;
 109   1        OLED_Clear();
 110   1      
 111   1        while(1) {
 112   2          xdata uint8_t rx;
 113   2          outL = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              06/19/2023 01:23:25 PAGE 3   

 114   2          rx = NRF24L01_RxPacket(g_recvBuf); //接收字节
 115   2          
 116   2          if (rx == 0) {
 117   3            OLED_Clear();
 118   3            OLED_ShowString(0, 0, "Received 0 !!!");
 119   3          } else {
 120   3            xdata u8 readPos;
 121   3            
 122   3            readPos = 0;
 123   3            while (readPos < rx) {
 124   4              xdata u8 cmd;
 125   4              xdata u8 value;
 126   4              xdata uint8_t s1[10];
 127   4              xdata uint8_t s2[10];
 128   4              xdata uint8_t str[10];
 129   4              cmd = g_recvBuf[readPos++];
 130   4              value = g_recvBuf[readPos++];
 131   4              if (cmd == value && cmd == MODE_COMMAND) {
 132   5                break;
 133   5              }
 134   4              uintToS(cmd, s1, 10);
 135   4              uintToS(value, s2, 10);
 136   4              sprintf(str, "%s:%s", s1, s2);
 137   4              OLED_ShowString8(0, outL++, str);
 138   4            }
 139   3          }
 140   2        }
 141   1      
 142   1        /*while(1) {
 143   1          u8 outLL = outL;
 144   1          xdata uint8_t res;
 145   1          xdata uint8_t tx[1];
 146   1          xdata uint8_t numStr[10];
 147   1          xdata uint8_t str[20];
 148   1      
 149   1          if (g_Rec) {
 150   1            xdata uint8_t rx;
 151   1            xdata uint8_t g_rece[8];
 152   1            u8 i;
 153   1            sprintf(str, "Receiving...");
 154   1            OLED_ShowString8(0, outLL, str);
 155   1            outLL++;
 156   1            rx = NRF24L01_RxPacket(g_rece); //接收字节
 157   1      
 158   1            if (rx != 0) {
 159   1              uintToS(rx, numStr, 10);
 160   1              sprintf(str, "Received: %s   ", numStr);
 161   1              OLED_ShowString8(0, outLL, str);
 162   1              outLL++;
 163   1              
 164   1              sprintf(str, "d: ");
 165   1              for (i = 0; i < rx; ++i) {
 166   1                u8 d = g_rece[i];
 167   1                uintToS(d, numStr, 10);
 168   1                sprintf(str, "%s %s", str, numStr);
 169   1              }
 170   1              sprintf(str, "%s    ", str);
 171   1              OLED_ShowString8(0, outLL, str);
 172   1              outLL++;
 173   1            }
 174   1          } else {
 175   1            tx[0] = someNumber;
C51 COMPILER V9.60.7.0   MAIN                                                              06/19/2023 01:23:25 PAGE 4   

 176   1            intToS(tx[0], numStr, 10);
 177   1            sprintf(str, "Sending %s   ", numStr);
 178   1            OLED_ShowString8(0, outLL, str);
 179   1            outLL++;
 180   1            res = NRF24L01_TxPacket((uint8_t *) tx, 1);
 181   1            if (res == TX_OK) {
 182   1              sprintf(str, "SUCCEES");
 183   1            } else {
 184   1              sprintf(str, "Failed");
 185   1            }
 186   1            OLED_ShowString8(0, outLL, str);
 187   1            outLL++;
 188   1      
 189   1            someNumber++;
 190   1            if (someNumber > 100) {
 191   1              someNumber = 0;
 192   1            }
 193   1            
 194   1            delay_ms(3000);
 195   1          }
 196   1        }*/
 197   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    544    ----
   CONSTANT SIZE    =     88    ----
   XDATA SIZE       =     18      46
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
