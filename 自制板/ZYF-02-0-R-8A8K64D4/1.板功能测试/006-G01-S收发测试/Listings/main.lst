C51 COMPILER V9.60.7.0   MAIN                                                              06/23/2023 17:33:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc8a8k64d4.H"
   2          #include "stc8a_gpio.H"
   3          #include "stc8a_spi.h"
   4          #include "stc8a_nvic.h"
   5          #include "typedef.h"
   6          #include "oled12864.h"
   7          #include "uart.h"
   8          #include "stc8a_adc.h"
   9          #include "stc8a_switch.h"
  10          #include "dtos.h"
  11          #include "G01_S.h"
  12          
  13          bit g_Rec = 0;
  14          u8 outL = 0;
  15          
  16          void OLED_GPIO_Config() {
  17   1        xdata GPIO_InitTypeDef conf;
  18   1        conf.Mode = GPIO_PullUp;
  19   1        conf.Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
  20   1        GPIO_Inilize(GPIO_P1, &conf);
  21   1        
  22   1        conf.Pin = GPIO_Pin_4;
  23   1        GPIO_Inilize(GPIO_P4, &conf);
  24   1      }
  25          
  26          void OLED12864_Init() {
  27   1        OLED_GPIO_Config();
  28   1        OLED_Init();
  29   1      }
  30          
  31          void MOTOR_GPIO_Config() {
  32   1        xdata GPIO_InitTypeDef conf;
  33   1        // conf.Mode = GPIO_OUT_PP;
  34   1        conf.Mode = GPIO_PullUp;
  35   1        conf.Pin = GPIO_Pin_All;
  36   1        GPIO_Inilize(GPIO_P6, &conf);
  37   1        
  38   1        conf.Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
  39   1        GPIO_Inilize(GPIO_P7, &conf);
  40   1        
  41   1        conf.Pin = GPIO_Pin_0;
  42   1        GPIO_Inilize(GPIO_P2, &conf);
  43   1        
  44   1        conf.Pin = GPIO_Pin_0;
  45   1        GPIO_Inilize(GPIO_P4, &conf);
  46   1      }
  47          
  48          void KEY_GPIO_Config() {
  49   1        xdata GPIO_InitTypeDef conf;
  50   1        conf.Mode = GPIO_PullUp;
  51   1        conf.Pin = GPIO_Pin_5;
  52   1        GPIO_Inilize(GPIO_P5, &conf);
  53   1      
  54   1        conf.Pin = GPIO_Pin_1;
C51 COMPILER V9.60.7.0   MAIN                                                              06/23/2023 17:33:53 PAGE 2   

  55   1        GPIO_Inilize(GPIO_P4, &conf);
  56   1      
  57   1        conf.Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
  58   1        GPIO_Inilize(GPIO_P7, &conf);
  59   1      }
  60          
  61          void ADC_Init(void) {
  62   1        xdata ADC_InitTypeDef ADC_InitStructure;    //结构定义
  63   1        ADC_InitStructure.ADC_SMPduty = 31;   //ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10
             -）
  64   1        ADC_InitStructure.ADC_CsSetup = 0;    //ADC 通道选择时间控制 0(默认),1
  65   1        ADC_InitStructure.ADC_CsHold = 1;   //ADC 通道选择保持时间控制 0,1(默认),2,3
  66   1        ADC_InitStructure.ADC_Speed = ADC_SPEED_2X1T;   //设置 ADC 工作时钟频率 ADC_SPEED_2X1T~ADC_SPEED_2X16T
  67   1        ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;  //ADC结果调整,  ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIF
             -IED
  68   1        ADC_Inilize(&ADC_InitStructure);    //初始化
  69   1        ADC_PowerControl(ENABLE);           //ADC电源开关, ENABLE或DISABLE
  70   1        // NVIC_ADC_Init(DISABLE, Priority_0);    //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  71   1      }
  72          
  73          void main() {
  74   1        int someNumber = 0;
  75   1        bit exist;
  76   1        
  77   1        OLED12864_Init();
  78   1      
  79   1        NRF24L01_GPIO_config();
  80   1        NRF24L01_Gpio_Init();
  81   1      
  82   1        OLED_ShowString8(0, 0, "CHECK MODULE...");
  83   1        exist = NRF24L01_check();
  84   1        
  85   1        exist = NRF24L01_check();
  86   1        if (exist) {
  87   2          OLED_ShowString8(0, outL, "G01-S Online");
  88   2        } else {
  89   2          OLED_ShowString8(0, outL, "G01-S Offline");
  90   2          while (1);
  91   2        }
  92   1        outL++;
  93   1        
  94   1        RF24L01_Init();
  95   1        _nop_();_nop_();_nop_();_nop_();_nop_();
  96   1      
  97   1        if (g_Rec) {
  98   2          OLED_ShowString8(0, outL, "Set MODE_RX");
  99   2          RF24L01_Set_Mode(MODE_RX); //接收模式
 100   2          _nop_();_nop_();_nop_();_nop_();_nop_();
 101   2        } else {
 102   2          OLED_ShowString8(0, outL, "Set MODE_TX");
 103   2          RF24L01_Set_Mode(MODE_TX); //发送模式
 104   2          _nop_();_nop_();_nop_();_nop_();_nop_();
 105   2        }
 106   1        outL++;
 107   1      
 108   1        while(1) {
 109   2          u8 outLL = outL;
 110   2          xdata uint8_t res;
 111   2          xdata uint8_t tx[1];
 112   2          xdata uint8_t numStr[10];
 113   2          xdata uint8_t str[20];
C51 COMPILER V9.60.7.0   MAIN                                                              06/23/2023 17:33:53 PAGE 3   

 114   2      
 115   2          if (g_Rec) {
 116   3            xdata uint8_t rx;
 117   3            xdata uint8_t g_rece[8];
 118   3            u8 i;
 119   3            sprintf(str, "Receiving...");
 120   3            OLED_ShowString8(0, outLL, str);
 121   3            outLL++;
 122   3            rx = NRF24L01_RxPacket(g_rece); //接收字节
 123   3      
 124   3            if (rx != 0) {
 125   4              uintToS(rx, numStr, 10);
 126   4              sprintf(str, "Received: %s   ", numStr);
 127   4              OLED_ShowString8(0, outLL, str);
 128   4              outLL++;
 129   4              
 130   4              sprintf(str, "d: ");
 131   4              for (i = 0; i < rx; ++i) {
 132   5                u8 d = g_rece[i];
 133   5                uintToS(d, numStr, 10);
 134   5                sprintf(str, "%s %s", str, numStr);
 135   5              }
 136   4              sprintf(str, "%s    ", str);
 137   4              OLED_ShowString8(0, outLL, str);
 138   4              outLL++;
 139   4            }
 140   3          } else {
 141   3            tx[0] = someNumber;
 142   3            intToS(tx[0], numStr, 10);
 143   3            sprintf(str, "Sending %s   ", numStr);
 144   3            OLED_ShowString8(0, outLL, str);
 145   3            outLL++;
 146   3            res = NRF24L01_TxPacket((uint8_t *) tx, 1);
 147   3            if (res == TX_OK) {
 148   4              sprintf(str, "SUCCEES");
 149   4            } else {
 150   4              sprintf(str, "Failed");
 151   4            }
 152   3            OLED_ShowString8(0, outLL, str);
 153   3            outLL++;
 154   3      
 155   3            someNumber++;
 156   3            if (someNumber > 100) {
 157   4              someNumber = 0;
 158   4            }
 159   3            
 160   3            delay_ms(3000);
 161   3          }
 162   2        }
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    743    ----
   CONSTANT SIZE    =    142    ----
   XDATA SIZE       =   ----      52
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
