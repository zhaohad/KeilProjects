C51 COMPILER V9.60.7.0   OLED12864                                                         01/12/2025 22:53:31 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE OLED12864
OBJECT MODULE PLACED IN .\Objects\oled12864.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\oled12864.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\oled12864.lst) TABS(2) OBJECT(.\Objects\oled12864.obj)

line level    source

   1          #include "oled12864.h"
   2          #include "oled12864wordlib.h"
   3          
   4          //初始化SSD1306     
   5          void OLED_Init() {
   6   1        OLED_RST_Set();
   7   1        delay_ms(100);
   8   1        OLED_RST_Clr();
   9   1        delay_ms(100);
  10   1        OLED_RST_Set(); 
  11   1      
  12   1        OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
  13   1        OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
  14   1        OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
  15   1        OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
  16   1        OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
  17   1        OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
  18   1        OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
  19   1        OLED_WR_Byte(0xC8, OLED_CMD); //Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
  20   1        OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
  21   1        OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
  22   1        OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
  23   1        OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset Shift Mapping RAM Counter (0x00~0x3F)
  24   1        OLED_WR_Byte(0x00, OLED_CMD); //-not offset
  25   1        OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
  26   1        OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
  27   1        OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
  28   1        OLED_WR_Byte(0xF1, OLED_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
  29   1        OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
  30   1        OLED_WR_Byte(0x12, OLED_CMD);
  31   1        OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
  32   1        OLED_WR_Byte(0x40, OLED_CMD); //Set VCOM Deselect Level
  33   1        OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
  34   1        OLED_WR_Byte(0x02, OLED_CMD); //
  35   1        OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
  36   1        OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
  37   1        OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
  38   1        OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7) 
  39   1        OLED_WR_Byte(0xAF, OLED_CMD); //--turn on oled panel
  40   1        OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/ 
  41   1        OLED_Clear();
  42   1        OLED_Set_Pos(0, 0);   
  43   1      }
  44          
  45          //向SSD1306写入一个字节。
  46          //dat:要写入的数据/命令
  47          //cmd:数据/命令标志 0,表示命令;1,表示数据;
  48          void OLED_WR_Byte(u8 dat, u8 cmd) { 
  49   1        xdata u8 i;
  50   1        if(cmd) {
  51   2          OLED_DC_Set();
  52   2        } else { 
  53   2          OLED_DC_Clr();
  54   2        }   
C51 COMPILER V9.60.7.0   OLED12864                                                         01/12/2025 22:53:31 PAGE 2   

  55   1        OLED_CS_Clr();
  56   1        for(i = 0; i < 8; i++) {
  57   2          OLED_SCLK_Clr();
  58   2          if(dat & 0x80) {
  59   3            OLED_SDIN_Set();
  60   3          }
  61   2          else {
  62   3            OLED_SDIN_Clr();
  63   3          }
  64   2          OLED_SCLK_Set();
  65   2          dat <<= 1;   
  66   2        }             
  67   1        OLED_CS_Set();
  68   1        OLED_DC_Set();      
  69   1      }
  70          
  71          void OLED_Set_Pos(u8 x, u8 y) { 
  72   1        OLED_WR_Byte(0xb0 + y, OLED_CMD);
  73   1        OLED_WR_Byte(((x & 0xf0) >> 4) | 0x10, OLED_CMD);
  74   1        OLED_WR_Byte((x & 0x0f) | 0x01, OLED_CMD); 
  75   1      }
  76          
  77          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
  78          void OLED_Clear() {
  79   1        xdata u8 i, n;
  80   1        for(i = 0; i < 8; i++) {  
  81   2          OLED_WR_Byte(0xb0 + i, OLED_CMD);    //设置页地址（0~7）
  82   2          OLED_WR_Byte(0x00, OLED_CMD);      //设置显示位置―列低地址
  83   2          OLED_WR_Byte(0x10, OLED_CMD);      //设置显示位置―列高地址   
  84   2          for(n = 0; n < 128; n++) {
  85   3            OLED_WR_Byte(0, OLED_DATA);
  86   3          }
  87   2        } //更新显示
  88   1      }
  89          
  90          u8 Bit4ToHex(u8 bit4) {
  91   1        bit4 &= 0x0f;
  92   1        if (bit4 < 10) {
  93   2          bit4 = bit4 + '0';
  94   2        } else {
  95   2          bit4 = bit4 + 'A' - 10;
  96   2        }
  97   1        return bit4;
  98   1      }
  99          
 100          #if DISPLAY_MODE & DISPLAY_MODE_X16
 101          void OLED_ShowChar(u8 x, u8 y, u8 chr) {
 102   1        xdata u8 c, i;
 103   1        c = chr - ' ';
 104   1        if (c < 0 || chr > '~') {
 105   2          c = '?' - ' ';
 106   2        }
 107   1      
 108   1        if (x > Max_Column - 1) {
 109   2          x = 0;
 110   2          y = y + 2;
 111   2        }
 112   1        OLED_Set_Pos(x, y);
 113   1        for (i = 0; i < 8; ++i) {
 114   2          OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 115   2        }
 116   1        OLED_Set_Pos(x, y + 1);
C51 COMPILER V9.60.7.0   OLED12864                                                         01/12/2025 22:53:31 PAGE 3   

 117   1        for (i = 0; i < 8; ++i) {
 118   2          OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 119   2        }
 120   1      }
 121          
 122          //显示一个字符号串
 123          void OLED_ShowString(u8 x,u8 y, u8 * chr) {
 124   1        xdata u8 j = 0;
 125   1        while (chr[j] != '\0') {
 126   2          OLED_ShowChar(x, y, chr[j]);
 127   2          x += 8;
 128   2          if(x > 120) {
 129   3            x = 0;
 130   3            y += 2;
 131   3          }
 132   2          j++;
 133   2        }
 134   1      }
 135          #endif
 136          
 137          #if DISPLAY_MODE & DISPLAY_MODE_X8
 138          void OLED_ShowChar8(u8 x, u8 y, u8 chr) {
 139   1        xdata u8 c, i;
 140   1        c = chr - ' ';
 141   1        if (x > Max_Column - 1) {
 142   2          x = 0;
 143   2          y = y + 1;
 144   2        }
 145   1        OLED_Set_Pos(x, y);
 146   1        for(i = 0; i < 6; i++) {
 147   2          OLED_WR_Byte(F6x8[c][i], OLED_DATA);
 148   2        }
 149   1      }
 150          
 151          void OLED_ShowString8(u8 x,u8 y, u8 * chr) {
 152   1        xdata u8 j = 0;
 153   1        while (chr[j] != '\0') {
 154   2          OLED_ShowChar8(x, y, chr[j]);
 155   2          x += 6;
 156   2          if(x > 120) {
 157   3            x = 0;
 158   3            y += 1;
 159   3          }
 160   2          j++;
 161   2        }
 162   1      }
 163          
 164          void OLED_ShowHexBuf8(u8 x, u8 y, u8 * buf, u8 len) {
 165   1        xdata u8 i;
 166   1        for (i = 0; i < len; ++i) {
 167   2          x += 1;
 168   2          OLED_ShowChar8(x, y, Bit4ToHex(buf[i] >> 4));
 169   2          x += 6;
 170   2          OLED_ShowChar8(x, y, Bit4ToHex(buf[i]));
 171   2          x += 9;
 172   2        }
 173   1      }
 174          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    863    ----
C51 COMPILER V9.60.7.0   OLED12864                                                         01/12/2025 22:53:31 PAGE 4   

   CONSTANT SIZE    =   2072    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
