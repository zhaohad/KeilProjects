C51 COMPILER V9.60.7.0   TIMER                                                             12/17/2023 09:57:07 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\timer.lst) TABS(2) OBJECT(.\Objects\timer.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明  **************
  14          
  15          本文件为STC8系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  16          
  17          ******************************************/
  18          
  19          #include  "timer.h"
  20          
  21          Interrupt_Callback g_interrupt_callback_timer2;
  22          
  23          /********************* Timer0中断函数************************/
  24          void timer0_int (void) interrupt TIMER0_VECTOR
  25          {
  26   1         P67 = ~P67;
  27   1      }
  28          
  29          /********************* Timer1中断函数************************/
  30          void timer1_int (void) interrupt TIMER1_VECTOR
  31          {
  32   1         P66 = ~P66;
  33   1      }
  34          
  35          /********************* Timer2中断函数************************/
  36          void timer2_int (void) interrupt TIMER2_VECTOR
  37          {
  38   1        g_interrupt_callback_timer2();
  39   1      }
  40          
  41          /********************* Timer3中断函数************************/
  42          void timer3_int (void) interrupt TIMER3_VECTOR
  43          {
  44   1        P64 = ~P64;
  45   1      }
  46          
  47          /********************* Timer4中断函数************************/
  48          void timer4_int (void) interrupt TIMER4_VECTOR
  49          {
  50   1        P63 = ~P63;
  51   1      }
  52          
  53          
  54          //========================================================================
C51 COMPILER V9.60.7.0   TIMER                                                             12/17/2023 09:57:07 PAGE 2   

  55          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  56          // 描述: 定时器初始化程序.
  57          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  58          // 返回: 成功返回0, 空操作返回1,错误返回2.
  59          // 版本: V1.0, 2012-10-22
  60          //========================================================================
  61          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  62          {
  63   1        if(TIM > Timer4)  return 1; //空操作
  64   1      
  65   1        if(TIM == Timer0)
  66   1        {
  67   2          Timer0_Stop();    //停止计数
  68   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer0_InterruptEnable(); //允许中断
  69   2          else    Timer0_InterruptDisable();  //禁止中断
  70   2          if(TIMx->TIM_Polity > Polity_3) return 2; //错误
  71   2          Timer0_Polity(TIMx->TIM_Polity);  //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polity_3
  72   2      
  73   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
  74   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  75   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer0_12T(); //12T
  76   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer0_1T();  //1T
  77   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer0_AsCounter(); //对外计数或分频
  78   2          else    Timer0_AsTimer(); //定时
  79   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer0_CLKO_Enable(); //输出时钟
  80   2          else    Timer0_CLKO_Disable();  //不输出时钟
  81   2          
  82   2          T0_Load(TIMx->TIM_Value);
  83   2          if(TIMx->TIM_Run == ENABLE) Timer0_Run(); //开始运行
  84   2          return  0;    //成功
  85   2        }
  86   1      
  87   1        if(TIM == Timer1)
  88   1        {
  89   2          Timer1_Stop();    //停止计数
  90   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer1_InterruptEnable(); //允许中断
  91   2          else    Timer1_InterruptDisable();  //禁止中断
  92   2          if(TIMx->TIM_Polity > Polity_3) return 2; //错误
  93   2          Timer1_Polity(TIMx->TIM_Polity);  //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polity_3
  94   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
  95   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  96   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer1_12T(); //12T
  97   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer1_1T();  //1T
  98   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer1_AsCounter(); //对外计数或分频
  99   2          else    Timer1_AsTimer(); //定时
 100   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer1_CLKO_Enable(); //输出时钟
 101   2          else    Timer1_CLKO_Disable();  //不输出时钟
 102   2          
 103   2          T1_Load(TIMx->TIM_Value);
 104   2          if(TIMx->TIM_Run == ENABLE) Timer1_Run(); //开始运行
 105   2          return  0;    //成功
 106   2        }
 107   1      
 108   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 109   1        {
 110   2          Timer2_Stop();  //停止计数
 111   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer2_InterruptEnable(); //允许中断
 112   2          else    Timer2_InterruptDisable();  //禁止中断
 113   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 114   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer2_12T(); //12T
 115   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer2_1T();  //1T
 116   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer2_AsCounter(); //对外计数或分频
C51 COMPILER V9.60.7.0   TIMER                                                             12/17/2023 09:57:07 PAGE 3   

 117   2          else    Timer2_AsTimer();   //定时
 118   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer2_CLKO_Enable();   //输出时钟
 119   2          else    Timer2_CLKO_Disable();  //不输出时钟
 120   2      
 121   2          T2_Load(TIMx->TIM_Value);
 122   2          if(TIMx->TIM_Run == ENABLE) Timer2_Run(); //开始运行
 123   2          return  0;    //成功
 124   2        }
 125   1      
 126   1        if(TIM == Timer3)   //Timer3,固定为16位自动重装, 中断无优先级
 127   1        {
 128   2          Timer3_Stop();  //停止计数
 129   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer3_InterruptEnable(); //允许中断
 130   2          else    Timer3_InterruptDisable();  //禁止中断
 131   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 132   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer3_12T(); //12T
 133   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer3_1T();  //1T
 134   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer3_AsCounter(); //对外计数或分频
 135   2          else    Timer3_AsTimer();   //定时
 136   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer3_CLKO_Enable();   //输出时钟
 137   2          else    Timer3_CLKO_Disable();  //不输出时钟
 138   2      
 139   2          T3_Load(TIMx->TIM_Value);
 140   2          if(TIMx->TIM_Run == ENABLE) Timer3_Run(); //开始运行
 141   2          return  0;    //成功
 142   2        }
 143   1      
 144   1        if(TIM == Timer4)   //Timer3,固定为16位自动重装, 中断无优先级
 145   1        {
 146   2          Timer4_Stop();  //停止计数
 147   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer4_InterruptEnable(); //允许中断
 148   2          else    Timer4_InterruptDisable();  //禁止中断
 149   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 150   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer4_12T(); //12T
 151   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer4_1T();  //1T
 152   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer4_AsCounter(); //对外计数或分频
 153   2          else    Timer4_AsTimer();   //定时
 154   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer4_CLKO_Enable();   //输出时钟
 155   2          else    Timer4_CLKO_Disable();  //不输出时钟
 156   2      
 157   2          T4_Load(TIMx->TIM_Value);
 158   2          if(TIMx->TIM_Run == ENABLE) Timer4_Run(); //开始运行
 159   2          return  0;    //成功
 160   2        }
 161   1        return 2; //错误
 162   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    830    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
