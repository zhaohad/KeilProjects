C51 COMPILER V9.60.7.0   MAIN                                                              08/10/2024 15:21:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc8a8k64d4.H"
   2          #include "stc8a_gpio.h"
   3          #include "STC8A_UART.h"
   4          #include "STC8A_Switch.h"
   5          #include "STC8A_NVIC.h"
   6          #include "CH9239.h"
   7          #include "delay.h"
   8          
   9          #include "typedef.h"
  10          #include "74HC595.h"
  11          #include "74HC165.h"
  12          
  13          void UART_Debuging_Config() {
  14   1        COMx_InitDefine COMx_InitStructure; //结构定义
  15   1        UART1_SW(UART1_SW_P30_P31);
  16   1        COMx_InitStructure.UART_Mode = UART_8bit_BRTx; //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9b
             -it_BRTx
  17   1        COMx_InitStructure.UART_BRT_Use = BRT_Timer1; //使用波特率, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BR
             -T_Timer2)
  18   1        COMx_InitStructure.UART_BaudRate = 9600ul; //波特率,     110 ~ 115200
  19   1        COMx_InitStructure.UART_RxEnable = ENABLE; //接收允许,   ENABLE或DISABLE
  20   1        UART_Configuration(UART1, &COMx_InitStructure); //初始化串口2 USART1,USART2,USART3,USART4
  21   1        NVIC_UART1_Init(ENABLE,Priority_1); //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Prio
             -rity_2,Priority_3
  22   1        EA = 1;
  23   1      }
  24          
  25          void  UART_9239_config() {
  26   1        COMx_InitDefine COMx_InitStructure; //结构定义
  27   1        UART2_SW(UART2_SW_P10_P11);
  28   1        COMx_InitStructure.UART_Mode = UART_8bit_BRTx; //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9b
             -it_BRTx
  29   1        COMx_InitStructure.UART_BRT_Use = BRT_Timer2; //使用波特率, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BR
             -T_Timer2)
  30   1        COMx_InitStructure.UART_BaudRate = 9600ul; //波特率,     110 ~ 115200
  31   1        COMx_InitStructure.UART_RxEnable = ENABLE; //接收允许,   ENABLE或DISABLE
  32   1        UART_Configuration(UART2, &COMx_InitStructure); //初始化串口2 USART1,USART2,USART3,USART4
  33   1        NVIC_UART2_Init(ENABLE,Priority_1); //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Prio
             -rity_2,Priority_3
  34   1        EA = 1;
  35   1      }
  36          
  37          void CH9239_GPIO_Config() {
  38   1        GPIO_InitTypeDef conf;
  39   1        conf.Mode = GPIO_PullUp;
  40   1        
  41   1        conf.Pin = GPIO_Pin_4;
  42   1        GPIO_Inilize(GPIO_P5, &conf);
  43   1        
  44   1        conf.Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5 | GPIO_Pin_4 | GPIO_Pin_2 | GPIO_Pin_3;
  45   1        GPIO_Inilize(GPIO_P1, &conf);
  46   1        
  47   1        conf.Pin = GPIO_Pin_4;
  48   1        GPIO_Inilize(GPIO_P4, &conf);
C51 COMPILER V9.60.7.0   MAIN                                                              08/10/2024 15:21:10 PAGE 2   

  49   1      
  50   1        conf.Pin = GPIO_Pin_0 | GPIO_Pin_1;
  51   1        GPIO_Inilize(GPIO_P1, &conf);
  52   1      }
  53          
  54          void C595_GPIO_Config() {
  55   1        GPIO_InitTypeDef conf;
  56   1        conf.Mode = GPIO_PullUp;
  57   1        
  58   1        conf.Pin = GPIO_Pin_5;
  59   1        GPIO_Inilize(GPIO_P5, &conf);
  60   1      
  61   1        conf.Pin = GPIO_Pin_6 | GPIO_Pin_7;
  62   1        GPIO_Inilize(GPIO_P3, &conf);
  63   1        
  64   1        conf.Pin = GPIO_Pin_1;
  65   1        GPIO_Inilize(GPIO_P4, &conf);
  66   1        
  67   1        conf.Pin = GPIO_Pin_0;
  68   1        GPIO_Inilize(GPIO_P2, &conf);
  69   1      }
  70          
  71          void C165_GPIO_Config() {
  72   1        GPIO_InitTypeDef conf;
  73   1        conf.Mode = GPIO_PullUp;
  74   1      
  75   1        conf.Pin = GPIO_Pin_2;
  76   1        GPIO_Inilize(GPIO_P4, &conf); 
  77   1        
  78   1        conf.Pin = GPIO_Pin_1 | GPIO_Pin_2;
  79   1        GPIO_Inilize(GPIO_P2, &conf);
  80   1        
  81   1        conf.Pin = GPIO_Pin_2;
  82   1        GPIO_Inilize(GPIO_P0, &conf);
  83   1      }
  84          
  85          bit is_changed(u8 * new_k, u8 new_k_l, u8 * last_k, u8 last_k_l) {
  86   1        xdata u8 i;
  87   1        if (new_k_l != last_k_l) {
  88   2          return 1;
  89   2        }
  90   1        for (i = 0; i < new_k_l; ++i) {
  91   2          if (new_k[i] != last_k[i]) {
  92   3            return 1;
  93   3          }
  94   2        }
  95   1        return 0;
  96   1      }
  97          
  98          void copy_keys(u8 * new_k, u8 * last_k, u8 l) {
  99   1        xdata u8 i;
 100   1        for (i = 0; i < l; ++i) {
 101   2          last_k[i] = new_k[i];
 102   2        }
 103   1      }
 104          
 105          void show_sys_led() {
 106   1        if (g_KeyBoardStatus.isCapsLockOn) {
 107   2          write_byte_595(0xfe);
 108   2          flush_595();
 109   2        } else {
 110   2          write_byte_595(0xff);
C51 COMPILER V9.60.7.0   MAIN                                                              08/10/2024 15:21:10 PAGE 3   

 111   2          flush_595();
 112   2        }
 113   1      }
 114          
 115          xdata u8 g_ack_done;
 116          void on_ch9329_dat_rec(u8 dat) {
 117   1        if (ch9239_uart_stream(dat)) {
 118   2          g_ack_done = 1;
 119   2          show_sys_led();
 120   2        } else {
 121   2          g_ack_done = 0;
 122   2        }
 123   1      }
 124          
 125          void delay() {
 126   1        u8 i;
 127   1        for (i = 0; i < 1; ++i) {
 128   2          delay_ms(254);
 129   2        }
 130   1      }
 131          
 132          void main() {
 133   1        xdata u8 led, ledg, ledb, ledr;
 134   1        xdata u8 keys_l, keys[CNT_MAX_READ_NORM_KEY], last_keys_l, last_keys[CNT_MAX_READ_NORM_KEY];
 135   1        xdata u8 t;
 136   1      
 137   1        C595_GPIO_Config();
 138   1        C165_GPIO_Config();
 139   1        CH9239_GPIO_Config();
 140   1      
 141   1        UART_Debuging_Config();
 142   1        UART_9239_config();
 143   1        
 144   1        ledg = 0x7f;
 145   1        ledr = 0xbf;
 146   1        ledb = 0xdf;
 147   1        led = ledr & ledb & ledg;
 148   1      
 149   1        stop_595();
 150   1        clear_595();
 151   1        keep_595();
 152   1        
 153   1        // TX1_write2buff(0x1);
 154   1        // key_board_get_sys_info();
 155   1        // TX2_write2buffs(cmd_key_general_data, 14);.
 156   1        // TX1_write2buff(0x2);
 157   1      
 158   1        /*g_9329_rec_len = 0;
 159   1        key_arr[0] = 0x04;*/
 160   1        
 161   1        // TX1_write2buff(0x3);
 162   1        // TX2_write2buffs(cmd_key_general_data, 14);
 163   1        // ch9329_key_down(0, key_arr, 1);
 164   1        /*for (i = 0; i < 10; ++i) {
 165   1          delay_ms(254);
 166   1        }
 167   1        TX1_write2buff(g_9329_rec_len);
 168   1        TX1_write2buffs(g_9329_rec, g_9329_rec_len);
 169   1        TX1_write2buff(0x04);
 170   1        
 171   1        ch9329_all_key_up();*/
 172   1        ch9239_get_sys_info();
C51 COMPILER V9.60.7.0   MAIN                                                              08/10/2024 15:21:10 PAGE 4   

 173   1        TX1_write2buff(ch9239_ready());
 174   1        delay_ms(254);
 175   1        delay_ms(254);
 176   1        delay_ms(254);
 177   1      
 178   1        t = 0;
 179   1        while(1) {
 180   2          keys_l = read_keys(keys);
 181   2          if (ch9239_ready() && is_changed(keys, keys_l, last_keys, last_keys_l)) {
 182   3            ch9239_key_down(0, keys, keys_l);
 183   3            last_keys_l = keys_l;
 184   3            copy_keys(keys, last_keys, keys_l);
 185   3          }
 186   2          
 187   2          /*load_data_165();
 188   2          t = read_byte_165();
 189   2          TX1_write2buff(t);
 190   2      
 191   2          t = read_byte_165();
 192   2          TX1_write2buff(t);
 193   2      
 194   2          t = read_byte_165();
 195   2          TX1_write2buff(t);
 196   2      
 197   2          t = read_byte_165();
 198   2          TX1_write2buff(t);
 199   2      
 200   2          t = read_byte_165();
 201   2          TX1_write2buff(t);
 202   2      
 203   2          t = read_byte_165();
 204   2          TX1_write2buff(t);
 205   2      
 206   2          t = read_byte_165();
 207   2          TX1_write2buff(t);
 208   2      
 209   2          t = read_byte_165();
 210   2          TX1_write2buff(t);
 211   2      
 212   2          t = read_byte_165();
 213   2          TX1_write2buff(t);
 214   2      
 215   2          t = read_byte_165();
 216   2          TX1_write2buff(t);
 217   2      
 218   2          t = read_byte_165();
 219   2          TX1_write2buff(t);
 220   2          
 221   2          delay();*/
 222   2        }
 223   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    611    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      40
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.7.0   MAIN                                                              08/10/2024 15:21:10 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
