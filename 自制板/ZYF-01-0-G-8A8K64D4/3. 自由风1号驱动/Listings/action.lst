C51 COMPILER V9.60.7.0   ACTION                                                            03/07/2024 22:44:17 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ACTION
OBJECT MODULE PLACED IN .\Objects\action.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\action.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\action.lst) TABS(2) OBJECT(.\Objects\action.obj)

line level    source

   1          #include "action.h"
   2          #include "action_def.h"
   3          #include "stc8a_timer.h"
   4          #include "stc8a_nvic.h"
   5          
   6          #include "servo_t0.h"
   7          #include "servo_t1.h"
   8          
   9          u8 (* g_cur_action)[CNT_ITEM_PER_ACTION] = ACT_FORWORD;
  10          u8 g_cur_action_max_step = CNT_ACTION_FORWARD;
  11          u8 g_cur_step = 0;
  12          u8 g_step_speed = 1;
  13          u8 g_timer_cnt = 0;
  14          xdata u8 t[CNT_SERVOS] = {90, 90, 135, 135, 0, 0};
  15          
  16          
  17          void Action_Timer_Init() {
  18   1        TIM_InitTypeDef TIM_InitStructure;
  19   1        // TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;
  20   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_12T;    //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_
             -Ext
  21   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  22   1        TIM_InitStructure.TIM_Run       = ENABLE;         //是否初始化后启动定时器, ENABLE或DISABLE
  23   1        Timer_Inilize(Timer2,&TIM_InitStructure);         //初始化Timer2    Timer0,Timer1,Timer2,Timer3,Timer4
  24   1        T2L = 0xB0;       //设置定时初始值
  25   1        T2H = 0x3C;       //设置定时初始值
  26   1        NVIC_Timer2_Init(ENABLE, NULL);   //中断使能, ENABLE/DISABLE; 无优先级
  27   1      
  28   1        EA = 1;
  29   1      }
  30          
  31          // 30.000 MHZ 20ms一周期
  32          void Action_Timer_Callback() {
  33   1        u8 step_done = 0;
  34   1        u8 stride = g_cur_action[g_cur_step][ACTION_STRIDE_INDEX];
  35   1        ++g_timer_cnt;
  36   1        if (g_cur_step < g_cur_action_max_step) {
  37   2          g_step_speed = g_cur_action[g_cur_step][ACTION_SPEED_INDEX];
  38   2          if (g_timer_cnt >= g_step_speed) {
  39   3            g_timer_cnt = 0;
  40   3            step_done = Servo_T0_Step_One(g_cur_action[g_cur_step], stride);
  41   3            step_done &= Servo_T1_Step_One((u8 *) g_cur_action[g_cur_step] + CNT_SERVOS, stride);
  42   3          }
  43   2          if (step_done) {
  44   3            ++g_cur_step;
  45   3          }
  46   2        }
  47   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    133    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
C51 COMPILER V9.60.7.0   ACTION                                                            03/07/2024 22:44:17 PAGE 2   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
