C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 19:56:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc8a8k64d4.H"
   2          #include "stc8a_gpio.H"
   3          #include "stc8a_spi.h"
   4          #include "stc8a_nvic.h"
   5          #include "typedef.h"
   6          #include "oled12864.h"
   7          #include "uart.h"
   8          #include "stc8a_adc.h"
   9          #include "stc8a_switch.h"
  10          #include "dtos.h"
  11          #include "G01_S.h"
  12          #include "command.h"
  13          
  14          #define TEST
  15          
  16          bit g_Mode = MODE_LVDAI;
  17          xdata u8 g_recvBuf[18];
  18          
  19          void OLED_GPIO_Config() {
  20   1        GPIO_InitTypeDef conf;
  21   1        conf.Mode = GPIO_OUT_PP;
  22   1        conf.Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;
  23   1        GPIO_Inilize(GPIO_P4, &conf);
  24   1      }
  25          
  26          void OLED12864_Init() {
  27   1        OLED_GPIO_Config();
  28   1        OLED_Init();
  29   1      }
  30          
  31          void MOTOR_GPIO_Config() {
  32   1        GPIO_InitTypeDef conf;
  33   1        conf.Mode = GPIO_PullUp;
  34   1        
  35   1        conf.Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
  36   1        GPIO_Inilize(GPIO_P2, &conf);
  37   1      }
  38          
  39          void process_command(u8 cmd, u8 value) {
  40   1        switch (cmd) {
  41   2          case ADC_COMMAND_0:
  42   2            if (value > FORWARD_THRESHOLD) {
  43   3              P_VM2_RZ7899_I1 = 1;
  44   3              P_VM2_RZ7899_I2 = 0;
  45   3              // OLED_ShowString8(0, 0, "R  F");
  46   3            }else if (value < BACKWARD_THRESHOLD) {
  47   3              P_VM2_RZ7899_I1 = 0;
  48   3              P_VM2_RZ7899_I2 = 1;
  49   3              // OLED_ShowString8(0, 0, "R  B");
  50   3            } else {
  51   3              P_VM2_RZ7899_I1 = 0;
  52   3              P_VM2_RZ7899_I2 = 0;
  53   3              // OLED_ShowString8(0, 0, "R  S");
  54   3            }
C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 19:56:53 PAGE 2   

  55   2            break;
  56   2          case ADC_COMMAND_2:
  57   2            if (value > FORWARD_THRESHOLD) {
  58   3              P_VM1_RZ7899_I1 = 1;
  59   3              P_VM1_RZ7899_I2 = 0;
  60   3              // OLED_ShowString8(0, 1, "L  F");
  61   3            }else if (value < BACKWARD_THRESHOLD) {
  62   3              P_VM1_RZ7899_I1 = 0;
  63   3              P_VM1_RZ7899_I2 = 1;
  64   3              // OLED_ShowString8(0, 1, "L  B");
  65   3            } else {
  66   3              P_VM1_RZ7899_I1 = 0;
  67   3              P_VM1_RZ7899_I2 = 0;
  68   3              // OLED_ShowString8(0, 1, "L  S");
  69   3            }
  70   2            break;
  71   2        }
  72   1      }
  73          
  74          void main() {
  75   1        bit exist;
  76   1      
  77   1      #ifdef TEST
  78   1        xdata u8 outL = 0;
  79   1        OLED12864_Init();
  80   1        // OLED_Clear();
  81   1      #endif
  82   1      
  83   1        NRF24L01_GPIO_config();
  84   1        NRF24L01_Gpio_Init();
  85   1        MOTOR_GPIO_Config();
  86   1      
  87   1      #ifdef TEST
  88   1        OLED_ShowString8(0, 0, "CHECK MODULE...");
  89   1      #endif
  90   1      
  91   1        exist = NRF24L01_check();
  92   1        
  93   1      #ifdef TEST
  94   1        if (exist) {
  95   2          OLED_ShowString8(0, outL, "G01-S Online");
  96   2        } else {
  97   2          OLED_ShowString8(0, outL, "G01-S Offline");
  98   2          while (1);
  99   2        }
 100   1        outL++;
 101   1        
 102   1        _nop_();_nop_();_nop_();_nop_();_nop_();
 103   1      
 104   1        OLED_ShowString8(0, outL, "Set MODE_RX");
 105   1        _nop_();_nop_();_nop_();_nop_();_nop_();
 106   1        outL++;
 107   1        OLED_Clear();
 108   1      #endif
 109   1        
 110   1        RF24L01_Init();
 111   1        RF24L01_Set_Mode(MODE_RX); //接收模式
 112   1      
 113   1        while(1) {
 114   2          xdata uint8_t rx;
 115   2      
 116   2      #ifdef TEST
C51 COMPILER V9.60.7.0   MAIN                                                              06/24/2023 19:56:53 PAGE 3   

 117   2          outL = 0;
 118   2      #endif
 119   2      
 120   2          rx = NRF24L01_RxPacket(g_recvBuf); //接收字节
 121   2          
 122   2          if (rx == 0) {
 123   3      #ifdef TEST
 124   3            OLED_Clear();
 125   3            OLED_ShowString(0, 0, "Received 0 !!!");
 126   3      #endif
 127   3          } else {
 128   3            xdata u8 readPos;
 129   3            
 130   3            readPos = 0;
 131   3            while (readPos < rx) {
 132   4      
 133   4      #ifdef TEST
 134   4              xdata uint8_t s1[10];
 135   4              xdata uint8_t s2[10];
 136   4              xdata uint8_t str[10];
 137   4      #endif
 138   4      
 139   4              xdata u8 cmd;
 140   4              xdata u8 value;
 141   4      
 142   4              cmd = g_recvBuf[readPos++];
 143   4              value = g_recvBuf[readPos++];
 144   4              if (cmd == value && cmd == MODE_COMMAND) {
 145   5                break;
 146   5              }
 147   4      
 148   4      #ifdef TEST
 149   4              uintToS(cmd, s1, 10);
 150   4              uintToS(value, s2, 10);
 151   4              sprintf(str, "%s:%s", s1, s2);
 152   4              OLED_ShowString8(0, outL++, str);
 153   4      #endif
 154   4      
 155   4              process_command(cmd, value);
 156   4            }
 157   3          }
 158   2        }
 159   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    435    ----
   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =     18      35
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
