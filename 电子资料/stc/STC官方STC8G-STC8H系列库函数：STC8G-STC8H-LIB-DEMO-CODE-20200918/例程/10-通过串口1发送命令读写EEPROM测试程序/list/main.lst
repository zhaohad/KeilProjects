C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:55:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst
                    -) TABS(2) OBJECT(.\list\main.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "config.h"
  14          #include  "gpio.h"
  15          #include  "UART.h"
  16          #include  "delay.h"
  17          #include  "eeprom.h"
  18          
  19          /*************  本程序功能说明  **************
  20          
  21          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  22          
  23          通过串口对STC内部自带的EEPROM(FLASH)进行读写测试。
  24          
  25          对FLASH做扇区擦除、写入、读出的操作，命令指定地址。
  26          
  27          默认波特率:  115200,N,8,1. 
  28          
  29          串口命令设置: (命令字母不区分大小写)
  30              E 0x0040             --> 对0x0040地址扇区内容进行擦除.
  31              W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.
  32              R 0x0040 10          --> 对0x0040地址读出10个字节数据. 
  33          
  34          注意：下载时，下载界面"硬件选项"中设置用户EEPROM大小，
  35          
  36          并确保串口命令中的地址在EEPROM设置的大小范围之内。
  37          
  38          下载时, 选择时钟 22.1184MHz (可以在配置文件"config.h"中修改).
  39          
  40          ******************************************/
  41          
  42          #define     Max_Length          100      //读写EEPROM缓冲长度
  43          
  44          /*************  本地常量声明  **************/
  45          
  46          
  47          /*************  本地变量声明  **************/
  48          u8  xdata   tmp[Max_Length];        //EEPROM操作缓冲
  49          
  50          
  51          /*************  本地函数声明  **************/
  52          
  53          
  54          /*************  外部函数和变量声明 *****************/
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:55:10 PAGE 2   

  55          
  56          
  57          /******************* IO配置函数 *******************/
  58          void  GPIO_config(void)
  59          {
  60   1        GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  61   1      
  62   1        GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1;    //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  63   1        GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_O
             -UT_PP
  64   1        GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);  //初始化
  65   1      }
  66          
  67          /***************  串口初始化函数 *****************/
  68          void  UART_config(void)
  69          {
  70   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
  71   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART
             -_9bit_BRTx
  72   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //使用波特率, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使
             -用BRT_Timer2)
  73   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  74   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  75   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  76   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
  77   1        COMx_InitStructure.UART_Polity    = Polity_0;     //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polit
             -y_3
  78   1        COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UAR
             -T1_SW_P16_P17,UART1_SW_P43_P44
  79   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  80   1      }
  81          
  82          /**********************************************/
  83          
  84          u8  CheckData(u8 dat)
  85          {
  86   1        if((dat >= '0') && (dat <= '9'))    return (dat-'0');
  87   1        if((dat >= 'A') && (dat <= 'F'))    return (dat-'A'+10);
  88   1        if((dat >= 'a') && (dat <= 'f'))    return (dat-'a'+10);
  89   1        return 0xff;
  90   1      }
  91          
  92          //========================================================================
  93          // 函数: u16    GetAddress(void)
  94          // 描述: 计算各种输入方式的地址.
  95          // 参数: 无.
  96          // 返回: 16位EEPROM地址.
  97          // 版本: V1.0, 2013-6-6
  98          //========================================================================
  99          u16 GetAddress(void)
 100          {
 101   1        u16 address;
 102   1        u8  i,j;
 103   1        
 104   1        address = 0;
 105   1        if((RX1_Buffer[2] == '0') && (RX1_Buffer[3] == 'X'))
 106   1        {
 107   2          for(i=4; i<8; i++)
 108   2          {
 109   3            j = CheckData(RX1_Buffer[i]);
 110   3            if(j >= 0x10)   return 65535;   //error
 111   3            address = (address << 4) + j;
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:55:10 PAGE 3   

 112   3          }
 113   2          return (address);
 114   2        }
 115   1        return  65535;  //error
 116   1      }
 117          
 118          /**************** 获取要读出数据的字节数 ****************************/
 119          u8 GetDataLength(void)
 120          {
 121   1        u8  i;
 122   1        u8  length;
 123   1        
 124   1        length = 0;
 125   1        for(i=9; i<COM1.RX_Cnt; i++)
 126   1        {
 127   2          if(CheckData(RX1_Buffer[i]) >= 10)  break;
 128   2          length = length * 10 + CheckData(RX1_Buffer[i]);
 129   2        }
 130   1        return (length);
 131   1      }
 132          
 133          /********************* 主函数 *************************/
 134          void main(void)
 135          {
 136   1        u8  i,j;
 137   1        u16 addr;
 138   1        u8  status;
 139   1      
 140   1        GPIO_config();
 141   1        UART_config();
 142   1        EA = 1;
 143   1      
 144   1        PrintString1("STC8系列单片机EEPROM测试程序，串口命令设置如下:\r\n");    //UART1发送一个字符串
 145   1        PrintString1("E 0x0040             --> 对0x0040地址扇区内容进行擦除.\r\n");     //UART1发送一个字符串
 146   1        PrintString1("W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.\r\n");  //UART1发送一个字符串
 147   1        PrintString1("R 0x0040 10          --> 对0x0040地址读出10个字节内容.\r\n");    //UART1发送一个字符串
 148   1        while(1)
 149   1        {
 150   2          delay_ms(1);
 151   2          if(COM1.RX_TimeOut > 0)   //超时计数
 152   2          {
 153   3            if(--COM1.RX_TimeOut == 0)
 154   3            {
 155   4              for(i=0; i<COM1.RX_Cnt; i++)    TX1_write2buff(RX1_Buffer[i]);    //把收到的数据原样返回,用于测试
 156   4      
 157   4              status = 0xff;  //状态给一个非0值
 158   4              if((COM1.RX_Cnt >= 8) && (RX1_Buffer[1] == ' ')) //最短命令为8个字节
 159   4              {
 160   5                for(i=0; i<8; i++)
 161   5                {
 162   6                  if((RX1_Buffer[i] >= 'a') && (RX1_Buffer[i] <= 'z'))    RX1_Buffer[i] = RX1_Buffer[i] - 'a' + 'A';  
             -//小写转大写
 163   6                }
 164   5                addr = GetAddress();
 165   5                if(addr < 63488)    //限制在0~123扇区
 166   5                {
 167   6                  if(RX1_Buffer[0] == 'E')    //写入N个字节
 168   6                  {
 169   7                    EEPROM_SectorErase(addr);           //擦除扇区
 170   7                    PrintString1("擦除成功！\r\n");
 171   7                    status = 0; //命令正确
 172   7                  }
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:55:10 PAGE 4   

 173   6      
 174   6                  else if((RX1_Buffer[0] == 'W') && (RX1_Buffer[8] == ' '))    //写入N个字节
 175   6                  {
 176   7                    j = COM1.RX_Cnt - 9;
 177   7                    if(j > Max_Length)  j = Max_Length; //越界检测
 178   7                    //EEPROM_SectorErase(addr);           //擦除扇区
 179   7                    EEPROM_write_n(addr,&RX1_Buffer[9],j);      //写N个字节
 180   7                    PrintString1("已写入");
 181   7                    if(j >= 100)    {TX1_write2buff(j/100+'0');   j = j % 100;}
 182   7                    if(j >= 10)     {TX1_write2buff(j/10+'0');    j = j % 10;}
 183   7                    TX1_write2buff(j%10+'0');
 184   7                    PrintString1("字节！\r\n");
 185   7                    status = 0; //命令正确
 186   7                  }
 187   6      
 188   6                  else if((RX1_Buffer[0] == 'R') && (RX1_Buffer[8] == ' '))   //PC请求返回N字节EEPROM数据
 189   6                  {
 190   7                    j = GetDataLength();
 191   7                    if(j > Max_Length)  j = Max_Length; //越界检测
 192   7                    if(j > 0)
 193   7                    {
 194   8                      PrintString1("读出");
 195   8                      TX1_write2buff(j/10+'0');
 196   8                      TX1_write2buff(j%10+'0');
 197   8                      PrintString1("个字节内容如下：\r\n");
 198   8                      EEPROM_read_n(addr,tmp,j);
 199   8                      for(i=0; i<j; i++)  TX1_write2buff(tmp[i]);
 200   8                      TX1_write2buff(0x0d);
 201   8                      TX1_write2buff(0x0a);
 202   8                      status = 0; //命令正确
 203   8                    }
 204   7                  }
 205   6                }
 206   5              }
 207   4              if(status != 0) PrintString1("命令错误！\r\n");
 208   4              COM1.RX_Cnt = 0;
 209   4            }
 210   3          }
 211   2        }
 212   1      } 
 213          /**********************************************/
 214          
 215          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    809    ----
   CONSTANT SIZE    =    289    ----
   XDATA SIZE       =    100    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
