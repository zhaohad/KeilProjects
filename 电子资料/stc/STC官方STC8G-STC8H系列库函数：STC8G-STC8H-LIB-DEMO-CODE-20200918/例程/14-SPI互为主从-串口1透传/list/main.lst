C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:56:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst
                    -) TABS(2) OBJECT(.\list\main.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "config.h"
  14          #include  "GPIO.h"
  15          #include  "delay.h"
  16          #include  "UART.h"
  17          #include  "spi.h"
  18          
  19          /*************  功能说明  **************
  20          
  21          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  22          
  23          通过串口发送数据给MCU1，MCU1将接收到的数据由SPI发送给MCU2，MCU2再通过串口发送出去.
  24          
  25          设置方法 2：
  26          两个设备初始化时都设置 SSIG 为 0，MSTR 设置为0，此时两个设备都是不忽略 SS 的从机模式。
  27          当其中一个设备需要启动传输时，先检测 SS 管脚的电平，如果时候高电平，
  28          就将自己设置成忽略 SS 的主模式，自己的 SS 脚输出低电平，拉低对方的 SS 脚，即可进行数据传输。
  29          
  30                   MCU1                          MCU2
  31            |-----------------|           |-----------------|
  32            |            MISO |-----------| MISO            |
  33          --| TX         MOSI |-----------| MOSI         TX |--
  34            |            SCLK |-----------| SCLK            |
  35          --| RX           SS |-----------| SS           RX |--
  36            |-----------------|           |-----------------|
  37          
  38          
  39          下载时, 选择时钟 22.1184MHz (可以在配置文件"config.h"中修改).
  40          
  41          ******************************************/
  42          
  43          /*************  本地常量声明  **************/
  44          
  45          
  46          /*************  本地变量声明  **************/
  47          
  48          
  49          /*************  本地函数声明  **************/
  50          
  51          
  52          
  53          /*************  外部函数和变量声明 *****************/
  54          
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:56:36 PAGE 2   

  55          
  56          
  57          /******************** IO口配置 ********************/
  58          void  GPIO_config(void)
  59          {
  60   1        GPIO_InitTypeDef  GPIO_InitStructure;       //结构定义
  61   1      
  62   1        GPIO_InitStructure.Pin  = GPIO_Pin_All;     //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  63   1        GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO
             -_OUT_PP
  64   1        GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);  //初始化
  65   1      }
  66          
  67          /****************  串口初始化函数 *****************/
  68          void  UART_config(void)
  69          {
  70   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
  71   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART
             -_9bit_BRTx
  72   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //使用波特率, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使
             -用BRT_Timer2)
  73   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  74   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  75   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  76   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
  77   1        COMx_InitStructure.UART_Polity    = Polity_0;     //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polit
             -y_3
  78   1        COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UAR
             -T1_SW_P16_P17,UART1_SW_P43_P44
  79   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  80   1      
  81   1        PrintString1("STC8 UART1与SPI透传程序\r\n");    //UART1发送一个字符串
  82   1      }
  83          
  84          /****************  SPI初始化函数 *****************/
  85          void  SPI_config(void)
  86          {
  87   1        SPI_InitTypeDef   SPI_InitStructure;
  88   1        SPI_InitStructure.SPI_Module    = ENABLE;           //SPI启动    ENABLE, DISABLE
  89   1        SPI_InitStructure.SPI_SSIG      = ENABLE;         //片选位     ENABLE, DISABLE
  90   1        SPI_InitStructure.SPI_FirstBit  = SPI_MSB;          //移位方向   SPI_MSB, SPI_LSB
  91   1        SPI_InitStructure.SPI_Mode      = SPI_Mode_Slave;   //主从选择   SPI_Mode_Master, SPI_Mode_Slave
  92   1        SPI_InitStructure.SPI_CPOL      = SPI_CPOL_Low;    //时钟相位   SPI_CPOL_High,   SPI_CPOL_Low
  93   1        SPI_InitStructure.SPI_CPHA      = SPI_CPHA_2Edge;   //数据边沿   SPI_CPHA_1Edge,  SPI_CPHA_2Edge
  94   1        SPI_InitStructure.SPI_Interrupt = ENABLE;       //中断允许   ENABLE,DISABLE
  95   1        SPI_InitStructure.SPI_Speed     = SPI_Speed_4;      //SPI速度    SPI_Speed_4, SPI_Speed_16, SPI_Speed_64, S
             -PI_Speed_128
  96   1        SPI_InitStructure.SPI_IoUse     = SPI_P22_P23_P24_P25; //IO口切换   SPI_P12_P13_P14_P15, SPI_P22_P23_P24_
             -P25, SPI_P54_P40_P41_P43, SPI_P35_P34_P33_P32
  97   1        SPI_Init(&SPI_InitStructure);
  98   1        
  99   1        SPI_SS_2 = 1;
 100   1      }
 101          
 102          
 103          /******************** task A **************************/
 104          void main(void)
 105          {
 106   1        u8  i;
 107   1      
 108   1        GPIO_config();
 109   1        UART_config();
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:56:36 PAGE 3   

 110   1        SPI_config();
 111   1        EA = 1;
 112   1      
 113   1        while (1)
 114   1        {
 115   2          delay_ms(1);
 116   2              
 117   2          if(COM1.RX_TimeOut > 0)
 118   2          {
 119   3            if(--COM1.RX_TimeOut == 0)
 120   3            {
 121   4              if(COM1.RX_Cnt > 0)
 122   4              {
 123   5                COM1.B_RX_OK = 1;
 124   5              }
 125   4            }
 126   3          }
 127   2          if((COM1.B_RX_OK) && (SPI_SS_2))
 128   2          {
 129   3            SPI_SS_2 = 0;     //拉低从机 SS 管脚
 130   3            SPI_SetMode(SPI_Mode_Master);
 131   3            for(i=0;i<COM1.RX_Cnt;i++)
 132   3            {
 133   4              SPI_WriteByte(RX1_Buffer[i]); //发送串口数据
 134   4            }
 135   3            SPI_SS_2 = 1;    //拉高从机的 SS 管脚
 136   3            SPI_SetMode(SPI_Mode_Slave);
 137   3            COM1.RX_Cnt = 0;  //COM1.B_RX_OK = 0;
 138   3            COM1.B_RX_OK = 0;
 139   3          }
 140   2          
 141   2          if(SPI_RxTimerOut > 0)
 142   2          {
 143   3            if(--SPI_RxTimerOut == 0)
 144   3            {
 145   4              if(SPI_RxCnt > 0)
 146   4              {
 147   5                for(i=0; i<SPI_RxCnt; i++)  TX1_write2buff(SPI_RxBuffer[i]);
 148   5              }
 149   4              SPI_RxCnt = 0;
 150   4            }
 151   3          }
 152   2        }
 153   1      }
 154          
 155          
 156          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    267    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
