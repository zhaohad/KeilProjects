C51 COMPILER V9.59.0.0   TIMER                                                             09/18/2020 18:55:32 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\timer.l
                    -st) TABS(2) OBJECT(.\list\timer.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明  **************
  14          
  15          本文件为STC8系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  16          
  17          ******************************************/
  18          
  19          #include  "timer.h"
  20          #include  "PWM.h"
  21          
  22          /*************  本地变量声明  **************/
  23          bit PWM1_Flag;
  24          bit PWM2_Flag;
  25          bit PWM3_Flag;
  26          bit PWM4_Flag;
  27          
  28          /*************  外部函数和变量声明 *****************/
  29          extern PWMx_Duty PWMA_Duty;
  30          
  31          /********************* Timer0中断函数************************/
  32          void timer0_int (void) interrupt TIMER0_VECTOR
  33          {
  34   1        if(!PWM1_Flag)
  35   1        {
  36   2          PWMA_Duty.PWM1_Duty++;
  37   2          if(PWMA_Duty.PWM1_Duty >= 2047) PWM1_Flag = 1;
  38   2        }
  39   1        else
  40   1        {
  41   2          PWMA_Duty.PWM1_Duty--;
  42   2          if(PWMA_Duty.PWM1_Duty <= 0) PWM1_Flag = 0;
  43   2        }
  44   1      
  45   1        if(!PWM2_Flag)
  46   1        {
  47   2          PWMA_Duty.PWM2_Duty++;
  48   2          if(PWMA_Duty.PWM2_Duty >= 2047) PWM2_Flag = 1;
  49   2        }
  50   1        else
  51   1        {
  52   2          PWMA_Duty.PWM2_Duty--;
  53   2          if(PWMA_Duty.PWM2_Duty <= 0) PWM2_Flag = 0;
  54   2        }
C51 COMPILER V9.59.0.0   TIMER                                                             09/18/2020 18:55:32 PAGE 2   

  55   1      
  56   1        if(!PWM3_Flag)
  57   1        {
  58   2          PWMA_Duty.PWM3_Duty++;
  59   2          if(PWMA_Duty.PWM3_Duty >= 2047) PWM3_Flag = 1;
  60   2        }
  61   1        else
  62   1        {
  63   2          PWMA_Duty.PWM3_Duty--;
  64   2          if(PWMA_Duty.PWM3_Duty <= 0) PWM3_Flag = 0;
  65   2        }
  66   1      
  67   1        if(!PWM4_Flag)
  68   1        {
  69   2          PWMA_Duty.PWM4_Duty++;
  70   2          if(PWMA_Duty.PWM4_Duty >= 2047) PWM4_Flag = 1;
  71   2        }
  72   1        else
  73   1        {
  74   2          PWMA_Duty.PWM4_Duty--;
  75   2          if(PWMA_Duty.PWM4_Duty <= 0) PWM4_Flag = 0;
  76   2        }
  77   1        
  78   1        UpdatePwm(PWMA, &PWMA_Duty);
  79   1      }
  80          
  81          /********************* Timer1中断函数************************/
  82          void timer1_int (void) interrupt TIMER1_VECTOR
  83          {
  84   1      //   P66 = ~P66;
  85   1      }
  86          
  87          /********************* Timer2中断函数************************/
  88          void timer2_int (void) interrupt TIMER2_VECTOR
  89          {
  90   1      //  P65 = ~P65;
  91   1      }
  92          
  93          /********************* Timer3中断函数************************/
  94          void timer3_int (void) interrupt TIMER3_VECTOR
  95          {
  96   1      //  P64 = ~P64;
  97   1      }
  98          
  99          /********************* Timer4中断函数************************/
 100          void timer4_int (void) interrupt TIMER4_VECTOR
 101          {
 102   1      //  P63 = ~P63;
 103   1      }
 104          
 105          
 106          //========================================================================
 107          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
 108          // 描述: 定时器初始化程序.
 109          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
 110          // 返回: 成功返回0, 空操作返回1,错误返回2.
 111          // 版本: V1.0, 2012-10-22
 112          //========================================================================
 113          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
 114          {
 115   1        if(TIM > Timer4)  return 1; //空操作
 116   1      
C51 COMPILER V9.59.0.0   TIMER                                                             09/18/2020 18:55:32 PAGE 3   

 117   1        if(TIM == Timer0)
 118   1        {
 119   2          Timer0_Stop();    //停止计数
 120   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer0_InterruptEnable(); //允许中断
 121   2          else    Timer0_InterruptDisable();  //禁止中断
 122   2          if(TIMx->TIM_Polity > Polity_3) return 2; //错误
 123   2          Timer0_Polity(TIMx->TIM_Polity);  //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polity_3
 124   2      
 125   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
 126   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 127   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer0_12T(); //12T
 128   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer0_1T();  //1T
 129   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer0_AsCounter(); //对外计数或分频
 130   2          else    Timer0_AsTimer(); //定时
 131   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer0_CLKO_Enable(); //输出时钟
 132   2          else    Timer0_CLKO_Disable();  //不输出时钟
 133   2          
 134   2          T0_Load(TIMx->TIM_Value);
 135   2          if(TIMx->TIM_Run == ENABLE) Timer0_Run(); //开始运行
 136   2          return  0;    //成功
 137   2        }
 138   1      
 139   1        if(TIM == Timer1)
 140   1        {
 141   2          Timer1_Stop();    //停止计数
 142   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer1_InterruptEnable(); //允许中断
 143   2          else    Timer1_InterruptDisable();  //禁止中断
 144   2          if(TIMx->TIM_Polity > Polity_3) return 2; //错误
 145   2          Timer1_Polity(TIMx->TIM_Polity);  //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polity_3
 146   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
 147   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 148   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer1_12T(); //12T
 149   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer1_1T();  //1T
 150   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer1_AsCounter(); //对外计数或分频
 151   2          else    Timer1_AsTimer(); //定时
 152   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer1_CLKO_Enable(); //输出时钟
 153   2          else    Timer1_CLKO_Disable();  //不输出时钟
 154   2          
 155   2          T1_Load(TIMx->TIM_Value);
 156   2          if(TIMx->TIM_Run == ENABLE) Timer1_Run(); //开始运行
 157   2          return  0;    //成功
 158   2        }
 159   1      
 160   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 161   1        {
 162   2          Timer2_Stop();  //停止计数
 163   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer2_InterruptEnable(); //允许中断
 164   2          else    Timer2_InterruptDisable();  //禁止中断
 165   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 166   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer2_12T(); //12T
 167   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer2_1T();  //1T
 168   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer2_AsCounter(); //对外计数或分频
 169   2          else    Timer2_AsTimer();   //定时
 170   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer2_CLKO_Enable();   //输出时钟
 171   2          else    Timer2_CLKO_Disable();  //不输出时钟
 172   2      
 173   2          T2_Load(TIMx->TIM_Value);
 174   2          if(TIMx->TIM_Run == ENABLE) Timer2_Run(); //开始运行
 175   2          return  0;    //成功
 176   2        }
 177   1      
 178   1        if(TIM == Timer3)   //Timer3,固定为16位自动重装, 中断无优先级
C51 COMPILER V9.59.0.0   TIMER                                                             09/18/2020 18:55:32 PAGE 4   

 179   1        {
 180   2          Timer3_Stop();  //停止计数
 181   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer3_InterruptEnable(); //允许中断
 182   2          else    Timer3_InterruptDisable();  //禁止中断
 183   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 184   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer3_12T(); //12T
 185   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer3_1T();  //1T
 186   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer3_AsCounter(); //对外计数或分频
 187   2          else    Timer3_AsTimer();   //定时
 188   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer3_CLKO_Enable();   //输出时钟
 189   2          else    Timer3_CLKO_Disable();  //不输出时钟
 190   2      
 191   2          T3_Load(TIMx->TIM_Value);
 192   2          if(TIMx->TIM_Run == ENABLE) Timer3_Run(); //开始运行
 193   2          return  0;    //成功
 194   2        }
 195   1      
 196   1        if(TIM == Timer4)   //Timer3,固定为16位自动重装, 中断无优先级
 197   1        {
 198   2          Timer4_Stop();  //停止计数
 199   2          if(TIMx->TIM_Interrupt == ENABLE)   Timer4_InterruptEnable(); //允许中断
 200   2          else    Timer4_InterruptDisable();  //禁止中断
 201   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 202   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  Timer4_12T(); //12T
 203   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   Timer4_1T();  //1T
 204   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  Timer4_AsCounter(); //对外计数或分频
 205   2          else    Timer4_AsTimer();   //定时
 206   2          if(TIMx->TIM_ClkOut == ENABLE)  Timer4_CLKO_Enable();   //输出时钟
 207   2          else    Timer4_CLKO_Disable();  //不输出时钟
 208   2      
 209   2          T4_Load(TIMx->TIM_Value);
 210   2          if(TIMx->TIM_Run == ENABLE) Timer4_Run(); //开始运行
 211   2          return  0;    //成功
 212   2        }
 213   1        return 2; //错误
 214   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1063    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
