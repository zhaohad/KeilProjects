C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:57:46 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst
                    -) TABS(2) OBJECT(.\list\main.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "config.h"
  14          #include  "GPIO.h"
  15          #include  "timer.h"
  16          #include  "I2C.h"
  17          
  18          /*************  功能说明  **************
  19          
  20          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  21          
  22          内部集成I2C串行总线控制器做从机模式，SCL->P3.2, SDA->P3.3;
  23          IO口模拟I2C做主机模式，SCL->P0.0, SDA->P0.1;
  24          通过外部飞线连接 P0.0->P3.2, P0.1->P3.3，实现I2C自发自收功能。
  25          
  26          用STC的MCU的IO方式驱动8位数码管。
  27          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下,用户修改MCU主时钟频率时,自动定时于1ms.
  28          计数器每秒钟加1, 计数范围为0~9999.
  29          
  30          显示效果为: 上电后主机每秒钟发送一次计数数据，并在左边4个数码管上显示发送内容；从机接收到数据后在右边4个数
             -码管显示。
  31          
  32          下载时, 选择时钟 24MHz (可以在配置文件"config.h"中修改).
  33          
  34          ******************************************/
  35          
  36          /*************  本地常量声明  **************/
  37          #define DIS_DOT     0x20
  38          #define DIS_BLACK   0x10
  39          #define DIS_        0x11
  40          
  41          u8 code t_display[]={                       //标准字库
  42          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  43              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  44          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
  45              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  46              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  47          
  48          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
  49          
  50          /*************  本地变量声明  **************/
  51          u8  LED8[8];        //显示缓冲
  52          u8  display_index;  //显示位索引
  53          bit DisplayFlag;
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:57:46 PAGE 2   

  54          bit B_1ms;          //1ms标志
  55          
  56          u16 msecond;
  57          u16 second;   //测试用的秒计数变量
  58          u8  tmp[4];     //通用数组
  59          
  60          /*************  本地函数声明  **************/
  61          
  62          
  63          
  64          /*************  外部函数和变量声明 *****************/
  65          
  66          
  67          
  68          /******************** IO口配置 ********************/
  69          void  GPIO_config(void)
  70          {
  71   1        GPIO_InitTypeDef  GPIO_InitStructure;       //结构定义
  72   1      
  73   1        GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1;      //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  74   1        GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO
             -_OUT_PP
  75   1        GPIO_Inilize(GPIO_P0,&GPIO_InitStructure);  //初始化
  76   1      
  77   1        GPIO_InitStructure.Pin  = GPIO_Pin_3;       //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  78   1        GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO
             -_OUT_PP
  79   1        GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);  //初始化
  80   1      
  81   1        GPIO_InitStructure.Pin  = GPIO_Pin_All;     //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  82   1        GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO
             -_OUT_PP
  83   1        GPIO_Inilize(GPIO_P6,&GPIO_InitStructure);  //初始化
  84   1      
  85   1        GPIO_InitStructure.Pin  = GPIO_Pin_All;     //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  86   1        GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO
             -_OUT_PP
  87   1        GPIO_Inilize(GPIO_P7,&GPIO_InitStructure);  //初始化
  88   1      }
  89          
  90          /************************ 定时器配置 ****************************/
  91          void  Timer_config(void)
  92          {
  93   1        TIM_InitTypeDef   TIM_InitStructure;            //结构定义
  94   1        TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  95   1        TIM_InitStructure.TIM_Polity    = Polity_0;     //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polity_
             -3
  96   1        TIM_InitStructure.TIM_Interrupt = ENABLE;         //中断是否允许,   ENABLE或DISABLE
  97   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;   //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_E
             -xt
  98   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  99   1        TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / 1000);   //中断频率, 1000次/秒
 100   1        TIM_InitStructure.TIM_Run       = ENABLE;         //是否初始化后启动定时器, ENABLE或DISABLE
 101   1        Timer_Inilize(Timer0,&TIM_InitStructure);         //初始化Timer0    Timer0,Timer1,Timer2,Timer3,Timer4
 102   1      }
 103          
 104          /****************  I2C初始化函数 *****************/
 105          void  I2C_config(void)
 106          {
 107   1        I2C_InitTypeDef   I2C_InitStructure;
 108   1        I2C_InitStructure.I2C_Mode      = I2C_Mode_Slave;   //主从选择   I2C_Mode_Master, I2C_Mode_Slave
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:57:46 PAGE 3   

 109   1        I2C_InitStructure.I2C_Enable    = ENABLE;           //I2C功能使能,   ENABLE, DISABLE
 110   1        I2C_InitStructure.I2C_SL_ESTAI  = ENABLE;           //从机接收START信号中断使能,  ENABLE, DISABLE
 111   1        I2C_InitStructure.I2C_SL_ERXI   = ENABLE;           //从机接收1字节数据中断使能,  ENABLE, DISABLE
 112   1        I2C_InitStructure.I2C_SL_ETXI   = ENABLE;           //从机发送1字节数据中断使能,  ENABLE, DISABLE
 113   1        I2C_InitStructure.I2C_SL_ESTOI  = ENABLE;           //从机接收STOP信号中断使能,   ENABLE, DISABLE
 114   1        I2C_InitStructure.I2C_SL_MA     = ENABLE;           //使能从机地址比较功能,   ENABLE, DISABLE
 115   1        I2C_InitStructure.I2C_SL_ADR    = 0x2d;             //从机设备地址,  0~127  (0x2d<<1 = 0x5a)
 116   1        I2C_InitStructure.I2C_IoUse     = I2C_P33_P32;      //IO口切换   I2C_P14_P15, I2C_P24_P25, I2C_P33_P32
 117   1      
 118   1        I2C_Init(&I2C_InitStructure);
 119   1      }
 120          
 121          
 122          /******************** task A **************************/
 123          void main(void)
 124          {
 125   1        u8  i;
 126   1        
 127   1        GPIO_config();
 128   1        Timer_config();
 129   1        I2C_config();
 130   1        EA = 1;
 131   1      
 132   1        display_index = 0;
 133   1        DisplayFlag = 0;
 134   1        
 135   1        for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 136   1      
 137   1        while (1)
 138   1        {
 139   2          if(DisplayFlag)
 140   2          {
 141   3            DisplayFlag = 0;
 142   3            LED8[4] = I2C_Buffer[0];
 143   3            LED8[5] = I2C_Buffer[1];
 144   3            LED8[6] = I2C_Buffer[2];
 145   3            LED8[7] = I2C_Buffer[3];
 146   3          }
 147   2          
 148   2          if(B_1ms)
 149   2          {
 150   3            B_1ms = 0;
 151   3            
 152   3            if(++msecond >= 1000)   //1秒到
 153   3            {
 154   4              msecond = 0;        //清1000ms计数
 155   4              second++;         //秒计数+1
 156   4              if(second >= 10000)    second = 0;   //秒计数范围为0~9999
 157   4      
 158   4              tmp[0] = second / 1000;
 159   4              tmp[1] = (second % 1000) / 100;
 160   4              tmp[2] = (second % 100) / 10;
 161   4              tmp[3] = second % 10;
 162   4              LED8[0] = tmp[0];
 163   4              LED8[1] = tmp[1];
 164   4              LED8[2] = tmp[2];
 165   4              LED8[3] = tmp[3];
 166   4      
 167   4              WriteNbyte(0, tmp, 4);
 168   4            }
 169   3          }
 170   2        }
C51 COMPILER V9.59.0.0   MAIN                                                              09/18/2020 18:57:46 PAGE 4   

 171   1      }
 172          
 173          /********************** 显示扫描函数 ************************/
 174          void DisplayScan(void)
 175          {   
 176   1          P7 = ~T_COM[7-display_index];
 177   1          P6 = ~t_display[LED8[display_index]];
 178   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 179   1      }
 180          
 181          
 182          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    397    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
