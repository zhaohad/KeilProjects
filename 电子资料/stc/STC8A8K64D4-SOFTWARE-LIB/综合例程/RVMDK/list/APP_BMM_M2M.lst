C51 COMPILER V9.59.0.0   APP_BMM_M2M                                                       06/10/2021 10:21:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE APP_BMM_M2M
OBJECT MODULE PLACED IN .\list\APP_BMM_M2M.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\APP_BMM_M2M.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\D
                    -river\inc;..\User;..\App\inc) DEBUG PRINT(.\list\APP_BMM_M2M.lst) TABS(2) OBJECT(.\list\APP_BMM_M2M.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "APP_BMM_M2M.h"
  14          #include  "STC8A_GPIO.h"
  15          #include  "STC8A_UART.h"
  16          #include  "STC8A_BMM.h"
  17          #include  "STC8A_NVIC.h"
  18          
  19          
  20          /*************  功能说明  **************
  21          
  22          本程序演示BMM Memory to Memory数据转移.
  23          
  24          设置2个存储器空间，一个发送一个接收，分别初始化2个存储器空间内容.
  25          
  26          设置M2M BMM，上电后自动将发送存储里的内容写入到接收存储器空间.
  27          
  28          根据不同的读取顺序、写入顺序，接收到不同的数据结果.
  29          
  30          通过串口(P3.0,P3.1)打印接收存储器数据(上电打印一次).
  31          
  32          用定时器做波特率发生器，建议使用1T模式(除非低波特率用12T)，并选择可被波特率整除的时钟频率，以提高精度.
  33          
  34          下载时, 选择时钟 22.1184MHz (可以在配置文件"config.h"中修改).
  35          
  36          ******************************************/
  37          
  38          
  39          //========================================================================
  40          //                               本地常量声明 
  41          //========================================================================
  42          
  43          
  44          //========================================================================
  45          //                               本地变量声明
  46          //========================================================================
  47          
  48          bit BmmM2MFlag = 0;
  49          u8 xdata BmmTxBuffer[256];
  50          u8 xdata BmmRxBuffer[256];
  51          
  52          //========================================================================
  53          //                               本地函数声明
  54          //========================================================================
C51 COMPILER V9.59.0.0   APP_BMM_M2M                                                       06/10/2021 10:21:41 PAGE 2   

  55          
  56          
  57          //========================================================================
  58          //                            外部函数和变量声明
  59          //========================================================================
  60          
  61          
  62          //========================================================================
  63          // 函数: BMM_M2M_init
  64          // 描述: 用户初始化程序.
  65          // 参数: None.
  66          // 返回: None.
  67          // 版本: V1.0, 2020-09-28
  68          //========================================================================
  69          void BMM_M2M_init(void)
  70          {
  71   1        u16 i;
  72   1        COMx_InitDefine   COMx_InitStructure;   //结构定义
  73   1        BMM_M2M_InitTypeDef   BMM_M2M_InitStructure;    //结构定义
  74   1      
  75   1        //----------------------------------------------
  76   1        P3_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1); //P3.0,P3.1 设置为准双向口
  77   1        
  78   1        //----------------------------------------------
  79   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  80   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //使用波特率, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使
             -用BRT_Timer2)
  81   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率,     110 ~ 115200
  82   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  83   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口 UART1,UART2,UART3,UART4
  84   1        NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pri
             -ority_2,Priority_3
  85   1        printf("STC8A8K64D4 Memory to Memory BMM Test Programme!\r\n");  //UART发送一个字符串
  86   1      
  87   1        //----------------------------------------------
  88   1        BMM_M2M_InitStructure.BMM_Enable = ENABLE;      //BMM使能   ENABLE,DISABLE
  89   1        BMM_M2M_InitStructure.BMM_Length = 127;         //BMM传输总字节数   (0~255) + 1
  90   1        BMM_M2M_InitStructure.BMM_Tx_Buffer = BmmTxBuffer;  //发送数据存储地址
  91   1        BMM_M2M_InitStructure.BMM_Rx_Buffer = (u16)&BmmRxBuffer[255]; //接收数据存储地址
  92   1        BMM_M2M_InitStructure.BMM_SRC_Dir = M2M_ADDR_INC;   //数据源地址改变方向    M2M_ADDR_INC,M2M_ADDR_DEC
  93   1        BMM_M2M_InitStructure.BMM_DEST_Dir = M2M_ADDR_DEC;  //数据目标地址改变方向  M2M_ADDR_INC,M2M_ADDR_DEC
  94   1        BMM_M2M_Inilize(&BMM_M2M_InitStructure);    //初始化
  95   1        NVIC_BMM_M2M_Init(ENABLE,Priority_0,Priority_0);    //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0~P
             -riority_3; 总线优先级(低到高) Priority_0~Priority_3
  96   1      
  97   1        for(i=0; i<256; i++)
  98   1        {
  99   2          BmmTxBuffer[i] = i;
 100   2          BmmRxBuffer[i] = 0;
 101   2        }
 102   1        BMM_M2M_TRIG();   //触发启动转换
 103   1      }
 104          
 105          //========================================================================
 106          // 函数: Sample_BMM_M2M
 107          // 描述: 用户应用程序.
 108          // 参数: None.
 109          // 返回: None.
 110          // 版本: V1.0, 2020-09-24
 111          //========================================================================
 112          void Sample_BMM_M2M(void)
C51 COMPILER V9.59.0.0   APP_BMM_M2M                                                       06/10/2021 10:21:41 PAGE 3   

 113          {
 114   1        u16 i;
 115   1      
 116   1        if(BmmM2MFlag)
 117   1        {
 118   2          BmmM2MFlag = 0;
 119   2      
 120   2          for(i=0; i<256; i++)
 121   2          {
 122   3            printf("%02bX ", BmmRxBuffer[i]);
 123   3            if((i & 0x0f) == 0x0f)
 124   3              printf("\r\n");
 125   3          }
 126   2        }
 127   1      }
 128          
 129          //========================================================================
 130          // 函数: void M2M_BMM_Interrupt (void) interrupt 47
 131          // 描述: M2M BMM中断函数
 132          // 参数: none.
 133          // 返回: none.
 134          // 版本: VER1.0
 135          // 日期: 2021-5-8
 136          // 备注: 
 137          //========================================================================
 138          //void M2M_BMM_Interrupt(void) interrupt 13
 139          //{
 140          //  BMM_M2MIF_CLR();
 141          //  BmmM2MFlag = 1;
 142          //}
 143          
 144          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    250    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =    512      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
