C51 COMPILER V9.60.0.0   MPU6500                                                           07/24/2022 19:19:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MPU6500
OBJECT MODULE PLACED IN .\Objects\mpu6500.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE src\mpu6500.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\mpu6500.lst) TABS(2) OBJECT(.\Objects\mpu6500.obj)

line level    source

   1          #include "mpu6500.h"
   2          #include <intrins.h>
   3          #include "I2CBus.h"
   4          
   5          void Single_WriteI2C(u8 REG_Address,uchar REG_data) {
   6   1          I2CBus_Start();                  //起始信号
   7   1          I2CBus_Write(MPU_ADDR);   //发送设备地址+写信号
   8   1          I2CBus_Write(REG_Address);    //内部寄存器地址，
   9   1          I2CBus_Write(REG_data);       //内部寄存器数据，
  10   1          I2CBus_Stop();                   //发送停止信号
  11   1      }
  12          
  13          void InitMPU6500() {
  14   1        Single_WriteI2C(PWR_MGMT_1, 0x00);  //解除休眠状态
  15   1        Single_WriteI2C(SMPLRT_DIV, 0x07);
  16   1        Single_WriteI2C(CONFIG, 0x06);
  17   1        Single_WriteI2C(GYRO_CONFIG, 0x18);
  18   1        Single_WriteI2C(ACCEL_CONFIG, 0x01);
  19   1      }
  20          
  21          uchar Single_ReadI2C(uchar REG_Address) {
  22   1        uchar REG_data;
  23   1        I2CBus_Start();                   //起始信号
  24   1        I2CBus_Write(MPU_ADDR);    //发送设备地址+写信号
  25   1        I2CBus_Write(REG_Address);     //发送存储单元地址，从0开始  
  26   1        I2CBus_Start();                   //起始信号
  27   1        I2CBus_Write(MPU_ADDR + 1);  //发送设备地址+读信号
  28   1        REG_data = I2CBus_Read(1);       //读出寄存器数据
  29   1        I2CBus_Stop();                    //停止信号
  30   1        return REG_data;
  31   1      }
  32          
  33          int GetData(uchar REG_Address) {
  34   1        uchar H,L;
  35   1        H = Single_ReadI2C(REG_Address);
  36   1        L = Single_ReadI2C(REG_Address + 1);
  37   1        return ((H << 8) + L);   //合成数据
  38   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    124    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
