C51 COMPILER V9.60.0.0   DRV_SPI                                                           05/13/2022 21:57:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DRV_SPI
OBJECT MODULE PLACED IN ..\output\drv_spi.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE Source_File\drv_mcu\src\drv_spi.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(.\Source_File\app\inc;.\Source_File\drv_mcu\inc;.\Source_File\drv_periph\inc) DEBUG OBJECTEXTEND PRINT(..\output\drv_s
                    -pi.lst) TABS(2) OBJECT(..\output\drv_spi.obj)

line level    source

   1          #include "drv_spi.h"
   2          
   3          
   4          /**
   5            * @brief :SPI初始化(软件)
   6            * @param :无
   7            * @note  :无
   8            * @retval:无
   9            */
  10          void drv_spi_init( void )
  11          {
  12   1        //引脚配置 部分51单片机不需要
  13   1        //SCK MOSI NSS 配置为推挽输出
  14   1        SPI_SCK_PxM0 = IO_OUT_PUT_PP_M0 << SPI_SCK_PIN_BIT;
  15   1        SPI_SCK_PxM1 = IO_OUT_PUT_PP_M1 << SPI_SCK_PIN_BIT;
  16   1        
  17   1        SPI_MOSI_PxM0 = IO_OUT_PUT_PP_M0 << SPI_MOSI_PIN_BIT;
  18   1        SPI_MOSI_PxM1 = IO_OUT_PUT_PP_M1 << SPI_MOSI_PIN_BIT;
  19   1        
  20   1        SPI_NSS_PxM0 = IO_OUT_PUT_PP_M0 << SPI_NSS_PIN_BIT;
  21   1        SPI_NSS_PxM1 = IO_OUT_PUT_PP_M1 << SPI_NSS_PIN_BIT;
  22   1        
  23   1        //MISO 配置为输入
  24   1        SPI_MISO_PxM0 = IO_IN_PUT_ONLY_M0 << SPI_MISO_PIN_BIT;
  25   1        SPI_MISO_PxM1 = IO_IN_PUT_ONLY_M1 << SPI_MISO_PIN_BIT;
  26   1        
  27   1        //时钟置低
  28   1        SPI_SCK = 0;  
  29   1        //MOSI MISO NSS置高
  30   1        SPI_MOSI = 1;   
  31   1        SPI_MISO = 1;
  32   1        SPI_NSS = 1;  
  33   1      }
  34          
  35          /**
  36            * @brief :SPI收发一个字节
  37            * @param :
  38            *     @TxByte: 发送的数据字节
  39            * @note  :非堵塞式，一旦等待超时，函数会自动退出
  40            * @retval:接收到的字节
  41            */
  42          uint8_t drv_spi_read_write_byte( uint8_t TxByte )
  43          {
  44   1        uint8_t i = 0, Data = 0;
  45   1        
  46   1        spi_set_clk_low( );
  47   1        
  48   1        for( i = 0; i < 8; i++ )      //一个字节8byte需要循环8次
  49   1        {
  50   2          /** 发送 */
  51   2          if( 0x80 == ( TxByte & 0x80 ))
  52   2          {
  53   3            spi_set_mosi_hight( );    //如果即将要发送的位为 1 则置高IO引脚
C51 COMPILER V9.60.0.0   DRV_SPI                                                           05/13/2022 21:57:20 PAGE 2   

  54   3          }
  55   2          else
  56   2          {
  57   3            spi_set_mosi_low( );    //如果即将要发送的位为 0 则置低IO引脚
  58   3          }
  59   2          TxByte <<= 1;         //数据左移一位，先发送的是最高位
  60   2          spi_set_clk_high( );      //时钟线置高
  61   2          _nop_( );
  62   2        
  63   2          /** 接收 */
  64   2          Data <<= 1;           //接收数据左移一位，先接收到的是最高位
  65   2          if( 1 == spi_get_miso( ))
  66   2          {
  67   3            Data |= 0x01;       //如果接收时IO引脚为高则认为接收到 1
  68   3          }
  69   2          
  70   2          spi_set_clk_low( );       //时钟线置低
  71   2          _nop_( );
  72   2        }
  73   1        
  74   1        return Data;    //返回接收到的字节
  75   1      }
  76          
  77          /**
  78            * @brief :SPI收发字符串
  79            * @param :
  80            *     @ReadBuffer: 接收数据缓冲区地址
  81            *     @WriteBuffer:发送字节缓冲区地址
  82            *     @Length:字节长度
  83            * @note  :非堵塞式，一旦等待超时，函数会自动退出
  84            * @retval:无
  85            */
  86          void drv_spi_read_write_string( uint8_t* ReadBuffer, uint8_t* WriteBuffer, uint16_t Length )
  87          {
  88   1        spi_set_nss_low( );     //片选拉低
  89   1        
  90   1        while( Length-- )
  91   1        {
  92   2          *ReadBuffer = drv_spi_read_write_byte( *WriteBuffer );    //收发数据
  93   2          ReadBuffer++;
  94   2          WriteBuffer++;      //读写地址加1
  95   2        }
  96   1        
  97   1        spi_set_nss_high( );    //片选拉高
  98   1      }
  99          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    185    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----       8
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
