C51 COMPILER V9.60.0.0   MPU6500                                                           09/11/2022 20:30:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MPU6500
OBJECT MODULE PLACED IN .\Objects\mpu6500.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE src\mpu6500.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\mpu6500.lst) TABS(2) OBJECT(.\Objects\mpu6500.obj)

line level    source

   1          #include "mpu6500.h"
   2          #include <math.H>
   3          
   4          #define pi    3.14159265f                           
   5          //#define Kp    0.8f                        
   6          //#define Ki    0.001f
   7          //#define halfT 0.004f
   8                                     
   9          #define Kp    400.0f                        
  10          #define Ki    0.1f
  11          #define halfT 0.001f
  12          
  13          float idata q0 = 1, q1 = 0, q2 = 0, q3 = 0;   
  14          float idata exInt = 0, eyInt = 0, ezInt = 0;
  15          
  16          void MPU6500_Init() {
  17   1        u8 p[1] = {0x00};
  18   1        I2C_WriteNbyte_DAddr(MPU_ADDR, PWR_MGMT_1, p, 1);
  19   1        p[0] = 0x07;
  20   1        I2C_WriteNbyte_DAddr(MPU_ADDR, SMPLRT_DIV, p, 1);
  21   1        p[0] = 0x06;
  22   1        I2C_WriteNbyte_DAddr(MPU_ADDR, CONFIG, p, 1);
  23   1        p[0] = 0x18;
  24   1        I2C_WriteNbyte_DAddr(MPU_ADDR, GYRO_CONFIG, p, 1);
  25   1        p[0] = 0x01;
  26   1        I2C_WriteNbyte_DAddr(MPU_ADDR, ACCEL_CONFIG, p, 1);
  27   1      }
  28          
  29          int MPU6500_GetData(uchar REG_Address) {
  30   1        uchar H, L;
  31   1        I2C_ReadNbyte_DAddr(MPU_ADDR, REG_Address, &H, 1);
  32   1        I2C_ReadNbyte_DAddr(MPU_ADDR, REG_Address, &L, 1);
  33   1        return ((H << 8) + L);
  34   1      }
  35          void MPI6500_GetGAData(float outV[6]) {
  36   1        outV[0] = MPU6500_GetData(GYRO_XOUT_H) / (float) 131;
  37   1        outV[1] = MPU6500_GetData(GYRO_YOUT_H) / (float) 131;
  38   1        outV[2] = MPU6500_GetData(GYRO_ZOUT_H) / (float) 131;
  39   1        outV[3] = MPU6500_GetData(ACCEL_XOUT_H) / (float) 16384;
  40   1        outV[4] = MPU6500_GetData(ACCEL_YOUT_H) / (float) 16384;
  41   1        outV[5] = MPU6500_GetData(ACCEL_ZOUT_H) / (float) 16384;
  42   1      }
  43          
  44          void MPU6500_IMU_Update_arr(float v[6], float outAngle[2]) {
  45   1        MPU6500_IMU_Update(v[0], v[1], v[2], v[3], v[4], v[5], outAngle, outAngle + 1);
  46   1      }
  47          
  48          void MPU6500_IMU_Update(float gx, float gy, float gz, float ax, float ay, float az, float *angleX, float *
             -angleY) {
  49   1        float idata norm;
  50   1        float idata vx, vy, vz;
  51   1        float idata ex, ey, ez;
  52   1      
  53   1        norm = sqrt(ax * ax + ay * ay + az * az); //把加速度计的三维向量转成单维向量   
C51 COMPILER V9.60.0.0   MPU6500                                                           09/11/2022 20:30:49 PAGE 2   

  54   1        ax = ax / norm;
  55   1        ay = ay / norm;
  56   1        az = az / norm;
  57   1      
  58   1        // 下面是把四元数换算成《方向余弦矩阵》中的第三列的三个元素。 
  59   1        // 根据余弦矩阵和欧拉角的定义，地理坐标系的重力向量，转到机体坐标系，正好是这三个元素
  60   1        // 所以这里的vx vy vz，其实就是当前的欧拉角（即四元数）的机体坐标参照系上，换算出来的
  61   1        // 重力单位向量。
  62   1        vx = 2 * (q1 * q3 - q0 * q2);
  63   1        vy = 2 * (q0 * q1 + q2 * q3);
  64   1        vz = q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3 ;
  65   1      
  66   1        ex = (ay * vz - az * vy);
  67   1        ey = (az * vx - ax * vz);
  68   1        ez = (ax * vy - ay * vx);
  69   1      
  70   1        exInt = exInt + ex * Ki;
  71   1        eyInt = eyInt + ey * Ki;
  72   1        ezInt = ezInt + ez * Ki;
  73   1      
  74   1        gx = gx + Kp * ex + exInt;
  75   1        gy = gy + Kp * ey + eyInt;
  76   1        gz = gz + Kp * ez + ezInt;
  77   1      
  78   1        q0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
  79   1        q1 = q1 + ( q0 * gx + q2 * gz - q3 * gy) * halfT;
  80   1        q2 = q2 + ( q0 * gy - q1 * gz + q3 * gx) * halfT;
  81   1        q3 = q3 + ( q0 * gz + q1 * gy - q2 * gx) * halfT;
  82   1      
  83   1        norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
  84   1        q0 = q0 / norm;
  85   1        q1 = q1 / norm;
  86   1        q2 = q2 / norm;
  87   1        q3 = q3 / norm;
  88   1      
  89   1        *angleX = asin(2 * (q0 * q2 - q1 * q3 )) * 57.2957795f; // 俯仰 换算成度
  90   1        *angleY = asin(2 * (q0 * q1 + q2 * q3 )) * 57.2957795f; // 横滚
  91   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2499    ----
   CONSTANT SIZE    =      1    ----
   XDATA SIZE       =   ----      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     28      28
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
