C51 COMPILER V9.60.0.0   MAIN                                                              09/11/2022 20:30:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE src\main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc8a8k64d4.h"
   2          #include "typedef.h"
   3          #include "stc8a_gpio.h"
   4          #include "stc8a_i2c.h"
   5          #include "shanwai.h"
   6          #include "mpu6500.h"
   7          #include "stdio.h"
   8          #include "servo.h"
   9          #include "stc8a_pwm15bit.h"
  10          #include "oled12864.h"
  11          
  12          float idata g_AX = 0, g_AY = 0, g_AZ = 0;
  13          float idata g_GX = 0, g_GY = 0, g_GZ = 0;
  14          
  15          #define FACTOR_DEGREE 0.6f 
  16          
  17          #define MAX_FILTER_DEGREE 10
  18          #define MAX_INVTURNINTERVAL 5
  19          u8 idata g_LastDegree;
  20          bit idata g_LastDirection;
  21          u8 idata g_TurnInterval;
  22          u8 filterDegree(u8 d);
  23          
  24          void MPU6500_GPIO_Config() {
  25   1        P1_MODE_IO_PU(GPIO_Pin_4 | GPIO_Pin_5);
  26   1      }
  27          
  28          void Servo_GPIO_Config() {
  29   1        P4_MODE_IO_PU(GPIO_Pin_0);
  30   1      }
  31          
  32          void MPU6500_I2C_Config() {
  33   1        I2C_InitTypeDef conf;
  34   1        conf.I2C_Mode = I2C_Mode_Master; //主从选择   I2C_Mode_Master, I2C_Mode_Slave
  35   1        conf.I2C_Enable = ENABLE; //I2C功能使能,   ENABLE, DISABLE
  36   1        conf.I2C_MS_WDTA = DISABLE; //主机使能自动发送,  ENABLE, DISABLE
  37   1        conf.I2C_Speed = 16; //总线速度=Fosc/2/(Speed*2+4),      0~63
  38   1        I2C_Init(&conf);
  39   1      
  40   1        I2C_SW(I2C_P14_P15);
  41   1      }
  42          
  43          void MOTOR1_GPIO_Config() {
  44   1        P2_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1);
  45   1      }
  46          
  47          void MOTOR1_PWM15bit_init() {
  48   1        PWM15_InitTypeDef PWM15_InitStructure;
  49   1      
  50   1        PWM15_InitStructure.PWM_Enable    = ENABLE;   //PWM使能,  ENABLE, DISABLE
  51   1        PWM15_InitStructure.PWM_Period    = 0x7fff;   //PWM周期,  0~0x7fff
  52   1        PWM15_InitStructure.PWM_Clock_Sel = PWM_CLK_SYS; //时钟源选择,  PWM_CLK_SYS, PWM_CLK_TM2
  53   1        PWM15_InitStructure.PWM_Clock_PS  = 0;        //系统时钟分频参数(PS+1分频),  0~15
  54   1        PWM15_InitStructure.PWM_CInt      = DISABLE;  //计数器归零中断使能,  ENABLE, DISABLE
C51 COMPILER V9.60.0.0   MAIN                                                              09/11/2022 20:30:47 PAGE 2   

  55   1        PWM15_InitStructure.PWM_Counter   = ENABLE;   //计数器使能,  ENABLE, DISABLE
  56   1        PWM15_Init(&PWM15_InitStructure);
  57   1        
  58   1        // PWM15Duty(PWM15_1, 0, 999);    //PWM_ID, 输出低电平位置, 输出高电平位置
  59   1        PWMChannelCtrl(PWM15_0,ENABLE,0,DISABLE,DISABLE,DISABLE); //PWM_ID, 输出使能, 初始电平, PWM中断, 第二个触
             -发点中断, 第一触发点中断
  60   1      }
  61          
  62          void OLED12864_GPIO_Config() {
  63   1        GPIO_InitTypeDef conf;
  64   1        conf.Mode = GPIO_OUT_PP;
  65   1        conf.Pin = GPIO_Pin_All;
  66   1        GPIO_Inilize(GPIO_P0, &conf);
  67   1      }
  68          
  69          void main() {
  70   1        
  71   1        // UART Init
  72   1        UART_config();
  73   1        
  74   1        // MPU6500 Init
  75   1        MPU6500_GPIO_Config();
  76   1        MPU6500_I2C_Config();
  77   1        MPU6500_Init();
  78   1        
  79   1        // Servo Init
  80   1        Servo_GPIO_Config();
  81   1        Servo_Init();
  82   1        
  83   1        // Motor1 Init
  84   1        MOTOR1_GPIO_Config();
  85   1        P_MOTOR_A = 1;
  86   1        P_MOTOR_B = 0;
  87   1        
  88   1        // OLED12864 Init
  89   1        OLED12864_GPIO_Config();
  90   1        OLED_Init();
  91   1      
  92   1        EA = 1;
  93   1      
  94   1        while (1) {
  95   2          float idata values[6];
  96   2          float idata angle[2];
  97   2          char idata str[16];
  98   2          u8 idata d;
  99   2          char idata diff;
 100   2          MPI6500_GetGAData(values);
 101   2          MPU6500_IMU_Update_arr(values, angle);
 102   2          // SHANWAI_sendWaveValue(&angle, sizeof(angle[0]), 2);
 103   2          sprintf(str, "nX = %f", angle[0]);
 104   2          OLED_ShowString8(0, 0, str);
 105   2          sprintf(str, "nY = %f", angle[1]);
 106   2          OLED_ShowString8(0, 1, str);
 107   2          diff = (int) angle[1] / FACTOR_DEGREE;
 108   2          sprintf(str, "diff = %03d", (int) diff);
 109   2          OLED_ShowString8(0, 2, str);
 110   2          d = 90 - diff;
 111   2          /*sprintf(str, "d = %03d", (int) d);
 112   2          OLED_ShowString8(0, 3, str);
 113   2          sprintf(str, "l_d = %03d", (int) g_LastDegree);
 114   2          OLED_ShowString8(0, 4, str);*/
 115   2          d = filterDegree(d);
C51 COMPILER V9.60.0.0   MAIN                                                              09/11/2022 20:30:47 PAGE 3   

 116   2          if (d < 50) {
 117   3            d = 50;
 118   3          } else if (d > 130) {
 119   3            d = 130;
 120   3          }
 121   2          /*sprintf(str, "f_d = %03d", (int) d);
 122   2          OLED_ShowString8(0, 5, str);*/
 123   2          Servo_Set_Target_Degree(d);
 124   2          // Servo_Set_Target_Degree(90);
 125   2        }
 126   1      }
 127          
 128          u8 filterDegree(u8 d) {
 129   1        u8 idata diff;
 130   1        bit idata dir;
 131   1        if (d > 90 + 10) {
 132   2          d = 130;
 133   2        } else if (d < 90 - 10) {
 134   2          d = 50;
 135   2        } else {
 136   2          d = 90;
 137   2        }
 138   1        
 139   1        if (g_LastDegree > d) {
 140   2          diff = g_LastDegree - d;
 141   2          dir = 1;
 142   2        } else {
 143   2          diff = d - g_LastDegree;
 144   2          dir = 0;
 145   2        }
 146   1      
 147   1        g_TurnInterval++;
 148   1        if (dir != g_LastDirection) {
 149   2          if (g_TurnInterval < MAX_INVTURNINTERVAL) {
 150   3            return g_LastDegree;
 151   3          }
 152   2        }
 153   1      
 154   1        if (diff > MAX_FILTER_DEGREE) {
 155   2          g_LastDegree = d;
 156   2          g_LastDirection = dir;
 157   2          g_TurnInterval = 0;
 158   2        }
 159   1        return g_LastDegree;
 160   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    544    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =     26      51
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
