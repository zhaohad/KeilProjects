C51 COMPILER V9.60.7.0   MAIN                                                              04/02/2023 16:28:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "STC8A8K64D4.H"
   2          #include "STC8A_GPIO.H"
   3          #include "typedef.h"
   4          #include "RZ7899.h"
   5          #include "oled12864.h"
   6          #include "STC8A_ADC.h"
   7          #include "rotationCounter.h"
   8          #include "dtos.h"
   9          
  10          void INT_Init();
  11          void StateInit_check();
  12          void Interrupt_check();
  13          bit IsInterrupted(bit clearFlag);
  14          void CMD_Check();
  15          void CMD_Work();
  16          
  17          bit gIntFlag;
  18          bit gIsInInt;
  19          
  20          u8 g_state;
  21          u8 g_initStage;
  22          int g_MaxCount;
  23          
  24          u8 g_CMD;
  25          u8 g_CMD_Value;
  26          u8 g_CMD_Stage;
  27          
  28          #define INITSTAGE_NONE 0
  29          #define INITSTAGE_TO_MIN 1
  30          #define INITSTAGE_TO_MIN_START 2
  31          #define INITSTAGE_TO_MAX 3
  32          #define INITSTAGE_TO_START 4
  33          #define INITSTAGE_READY 5
  34          
  35          #define STATE_IDLE 0
  36          #define STATE_INIT 1
  37          #define STATE_BUSY 2
  38          
  39          #define CMD_NONE 0
  40          #define CMD_STOP 1
  41          #define CMD_GO_UP 2
  42          #define CMD_GO_DOWN 3
  43          #define CMD_GO_MAX 4
  44          #define CMD_GO_MIN 5
  45          #define CMD_GO_VALUE 6
  46          
  47          #define CMD_STAGE_NONE 0
  48          #define CMD_STAGE_UP 1
  49          #define CMD_STAGE_UP_ADJUST 2
  50          #define CMD_STAGE_UP_LIMIT 3
  51          #define CMD_STAGE_DOWN 4
  52          #define CMD_STAGE_DOWN_ADJUST 5
  53          #define CMD_STAGE_DOWN_LIMIT 6
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              04/02/2023 16:28:18 PAGE 2   

  55          void main() {
  56   1        RZ7899_Init();
  57   1      
  58   1        OLED_Init();
  59   1        OLED_ShowString8(0, 0, "START");
  60   1        
  61   1        RotationCounter_init();
  62   1        
  63   1        g_state = STATE_INIT;
  64   1        g_initStage = INITSTAGE_NONE;
  65   1        g_CMD = CMD_NONE;
  66   1        g_CMD_Stage = CMD_STAGE_NONE;
  67   1        while(1) {
  68   2          int rc;
  69   2          char str[20];
  70   2          u16 adc;
  71   2          float r;
  72   2          
  73   2          OLED_Clear();
  74   2          if (gIntFlag) {
  75   3            OLED_ShowString(0, 0, "1");
  76   3          } else {
  77   3            OLED_ShowString(0, 0, "0");
  78   3          }
  79   2      
  80   2          Interrupt_check();
  81   2          RotationCounter_check();
  82   2          CMD_Check();
  83   2      
  84   2          // rc = RotationCounter_getRotationCount();
  85   2          adc = Get_ADCResult(ADC_CHANEL);
  86   2          r = adc / 4096.f * 100.f;
  87   2          floatToS(r, str, 20);
  88   2          // sprintf(str, "maxcount = %d", g_MaxCount);
  89   2          OLED_ShowString(0, 4, str);
  90   2          
  91   2          switch (g_state) {
  92   3            case STATE_INIT: {
  93   4              StateInit_check();
  94   4              if (g_initStage == INITSTAGE_READY) {
  95   5                g_state = STATE_IDLE;
  96   5              }
  97   4              break;
  98   4            }
  99   3            case STATE_IDLE: {
 100   4              if (g_CMD != CMD_NONE) {
 101   5                g_state = STATE_BUSY;
 102   5                CMD_Work();
 103   5              }
 104   4              break;
 105   4            }
 106   3            case STATE_BUSY: {
 107   4              CMD_Work();
 108   4              break;
 109   4            }
 110   3            default:
 111   3              break;
 112   3          }
 113   2        }
 114   1      }
*** WARNING C280 IN LINE 68 OF src\main.c: 'rc': unreferenced local variable
 115          
C51 COMPILER V9.60.7.0   MAIN                                                              04/02/2023 16:28:18 PAGE 3   

 116          void INT_Init() {
 117   1        GPIO_InitTypeDef conf;
 118   1        GPIO_InitTypeDef conf1;
 119   1        conf.Mode = GPIO_PullUp;
 120   1        conf.Pin = GPIO_Pin_4;
 121   1        GPIO_Inilize(GPIO_P5, &conf);
 122   1        P_INT = 1;
 123   1        gIsInInt = 0;
 124   1      
 125   1        conf1.Mode = GPIO_PullUp;
 126   1        conf1.Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 127   1        GPIO_Inilize(GPIO_P0, &conf);
 128   1        P_INT = 1;
 129   1        
 130   1        P_INT_01 = 1;
 131   1        P_INT_02 = 1;
 132   1        P_INT_03 = 1;
 133   1        P_INT_04 = 1;
 134   1        P_INT_05 = 1;
 135   1        P_INT_06 = 1;
 136   1        P_INT_07 = 1;
 137   1      }
 138          
 139          void Interrupt_check() {
 140   1        if (!P_INT && !gIsInInt) {
 141   2          gIntFlag = 1;
 142   2          gIsInInt = 1;
 143   2        }
 144   1        if (gIsInInt && P_INT) {
 145   2          gIsInInt = 0;
 146   2          gIntFlag = 0;
 147   2        }
 148   1      }
 149          
 150          bit IsInterrupted(bit clearFlag) {
 151   1        bit res = gIntFlag;
 152   1        if (clearFlag) {
 153   2          gIntFlag = 0;
 154   2        }
 155   1        return res;
 156   1      }
 157          
 158          void StateInit_check() {
 159   1        switch (g_initStage) {
 160   2          case INITSTAGE_NONE: {
 161   3            OLED_ShowString(0, 2, "INITSTAGE_NONE");
 162   3            RZ7899_Run(RUN_STATE_INV);
 163   3            g_initStage = INITSTAGE_TO_MIN;
 164   3            break;
 165   3          }
 166   2          case INITSTAGE_TO_MIN: {
 167   3            OLED_ShowString(0, 2, "INITSTAGE_TO_MIN");
 168   3            if (IsInterrupted(0)) {
 169   4              RZ7899_Run(RUN_STATE_NORM);
 170   4              g_initStage = INITSTAGE_TO_MIN_START;
 171   4            }
 172   3            break;
 173   3          }
 174   2          case INITSTAGE_TO_MIN_START: {
 175   3            OLED_ShowString(0, 2, "INITSTAGE_TO_MIN_START");
 176   3            if (!IsInterrupted(0)) {
 177   4              RotationCounter_reset();
C51 COMPILER V9.60.7.0   MAIN                                                              04/02/2023 16:28:18 PAGE 4   

 178   4              g_initStage = INITSTAGE_TO_MAX;
 179   4            }
 180   3            break;
 181   3          }
 182   2          case INITSTAGE_TO_MAX: {
 183   3            OLED_ShowString(0, 2, "INITSTAGE_TO_MAX");
 184   3            if (IsInterrupted(0)) {
 185   4              RZ7899_Run(RUN_STATE_INV);
 186   4              g_initStage = INITSTAGE_TO_START;
 187   4            }
 188   3            break;
 189   3          }
 190   2          case INITSTAGE_TO_START: {
 191   3            OLED_ShowString(0, 2, "INITSTAGE_TO_START");
 192   3            if (!IsInterrupted(0)) {
 193   4              RZ7899_Run(RUN_STATE_STOP);
 194   4              g_initStage = INITSTAGE_READY;
 195   4              g_MaxCount = RotationCounter_getRotationCount();
 196   4            }
 197   3            break;
 198   3          }
 199   2          case INITSTAGE_READY: {
 200   3            OLED_ShowString(0, 2, "INITSTAGE_READY");
 201   3            break;
 202   3          }
 203   2        }
 204   1      }
 205          
 206          void CMD_Check() {
 207   1        if (!P_INT_01) {
 208   2          P_INT_01 = 1;
 209   2          P_INT_02 = 1;
 210   2          P_INT_03 = 1;
 211   2          P_INT_04 = 1;
 212   2          P_INT_05 = 1;
 213   2          P_INT_06 = 1;
 214   2          P_INT_07 = 1;
 215   2          g_CMD = CMD_STOP;
 216   2          OLED_ShowString(0, 6, "01 INT");
 217   2        } else if (!P_INT_02) {
 218   2          OLED_ShowString(0, 6, "02 INT");
 219   2          g_CMD = CMD_GO_UP;
 220   2        } else if (!P_INT_03) {
 221   2          OLED_ShowString(0, 6, "03 INT");
 222   2          g_CMD = CMD_GO_DOWN;
 223   2        } else if (!P_INT_04) {
 224   2          OLED_ShowString(0, 6, "04 INT");
 225   2          g_CMD = CMD_GO_MAX;
 226   2        } else if (!P_INT_05) {
 227   2          OLED_ShowString(0, 6, "05 INT");
 228   2          g_CMD = CMD_GO_MIN;
 229   2        } else if (!P_INT_06) {
 230   2          OLED_ShowString(0, 6, "06 INT");
 231   2          g_CMD = CMD_GO_VALUE;
 232   2          g_CMD_Value = 50;
 233   2        } else if (!P_INT_07) {
 234   2          OLED_ShowString(0, 6, "07 INT");
 235   2          g_CMD = CMD_GO_VALUE;
 236   2          g_CMD_Value = 20;
 237   2        }
 238   1      }
 239          
C51 COMPILER V9.60.7.0   MAIN                                                              04/02/2023 16:28:18 PAGE 5   

 240          void CMD_Work() {
 241   1        switch (g_CMD) {
 242   2          case CMD_NONE: {
 243   3            OLED_ShowString(0, 2, "CMD_NONE");
 244   3            g_state = STATE_IDLE;
 245   3            g_CMD_Stage = CMD_STAGE_NONE;
 246   3            break;
 247   3          }
 248   2          case CMD_STOP: {
 249   3            OLED_ShowString(0, 2, "CMD_STOP");
 250   3            RZ7899_Run(RUN_STATE_STOP);
 251   3            g_state = STATE_IDLE;
 252   3            g_CMD = CMD_NONE;
 253   3            g_CMD_Stage = CMD_STAGE_NONE;
 254   3            break;
 255   3          }
 256   2          case CMD_GO_UP:
 257   2          case CMD_GO_MAX: {
 258   3            OLED_ShowString(0, 2, "CMD_GO_UP OR MAX");
 259   3            if (g_CMD_Stage != CMD_STAGE_UP && g_CMD_Stage == CMD_STAGE_NONE) {
 260   4              RZ7899_Run(RUN_STATE_NORM);
 261   4              g_CMD_Stage = CMD_STAGE_UP;
 262   4            }
 263   3            if (g_CMD_Stage == CMD_STAGE_UP && IsInterrupted(0)) {
 264   4              RZ7899_Run(RUN_STATE_INV);
 265   4              g_CMD_Stage = CMD_STAGE_UP_ADJUST;
 266   4            }
 267   3            if (g_CMD_Stage == CMD_STAGE_UP_ADJUST && !IsInterrupted(0)) {
 268   4              RZ7899_Run(RUN_STATE_STOP);
 269   4              g_CMD_Stage = CMD_STAGE_UP_LIMIT;
 270   4              if (g_CMD == CMD_GO_MAX) {
 271   5                g_CMD = CMD_STOP;
 272   5                g_CMD_Stage = CMD_STAGE_NONE;
 273   5              }
 274   4            }
 275   3            if (g_CMD == CMD_GO_UP && P_INT_02) {
 276   4              g_CMD = CMD_STOP;
 277   4              g_CMD_Stage = CMD_STAGE_NONE;
 278   4            }
 279   3            break;
 280   3          }
 281   2          case CMD_GO_DOWN:
 282   2          case CMD_GO_MIN:{
 283   3            OLED_ShowString(0, 2, "CMD_GO_DOWN OR MIN");
 284   3            if (g_CMD_Stage != CMD_STAGE_DOWN && g_CMD_Stage == CMD_STAGE_NONE) {
 285   4              RZ7899_Run(RUN_STATE_INV);
 286   4              g_CMD_Stage = CMD_STAGE_DOWN;
 287   4            }
 288   3            if (g_CMD_Stage == CMD_STAGE_DOWN && IsInterrupted(0)) {
 289   4              RZ7899_Run(RUN_STATE_NORM);
 290   4              g_CMD_Stage = CMD_STAGE_DOWN_ADJUST;
 291   4            }
 292   3            if (g_CMD_Stage == CMD_STAGE_DOWN_ADJUST && !IsInterrupted(0)) {
 293   4              RZ7899_Run(RUN_STATE_STOP);
 294   4              g_CMD_Stage = CMD_STAGE_DOWN_LIMIT;
 295   4              if (g_CMD == CMD_GO_MIN) {
 296   5                g_CMD = CMD_STOP;
 297   5                g_CMD_Stage = CMD_STAGE_NONE;
 298   5              }
 299   4            }
 300   3            if (g_CMD == CMD_GO_DOWN && P_INT_03) {
 301   4              g_CMD = CMD_STOP;
C51 COMPILER V9.60.7.0   MAIN                                                              04/02/2023 16:28:18 PAGE 6   

 302   4              g_CMD_Stage = CMD_STAGE_NONE;
 303   4            }
 304   3            break;
 305   3          }
 306   2          case CMD_GO_VALUE: {
 307   3            OLED_ShowString8(0, 2, "CMD_GO_VALUE");
 308   3            break;
 309   3          }
 310   2        }
 311   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    899    ----
   CONSTANT SIZE    =    233    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
