C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2023 17:04:03 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "STC8A8K64D4.H"
   2          #include "STC8A_GPIO.H"
   3          #include "typedef.h"
   4          #include "RZ7899.h"
   5          #include "oled12864.h"
   6          #include "STC8A_ADC.h"
   7          #include "rotationCounter.h"
   8          #include "dtos.h"
   9          #include "test.h"
  10          
  11          void INT_Init();
  12          void StateInit_check();
  13          void Interrupt_check();
  14          bit IsInterrupted(bit clearFlag);
  15          void CMD_Check();
  16          void CMD_Work();
  17          
  18          bit gIntFlag;
  19          bit gIsInInt;
  20          
  21          u8 g_state;
  22          u8 g_initStage;
  23          int g_MaxCount;
  24          
  25          u8 g_CMD;
  26          u8 g_CMD_Value;
  27          u8 g_CMD_Stage;
  28          
  29          #define INITSTAGE_NONE 0
  30          #define INITSTAGE_TO_MIN 1
  31          #define INITSTAGE_TO_MIN_START 2
  32          #define INITSTAGE_TO_MAX 3
  33          #define INITSTAGE_TO_START 4
  34          #define INITSTAGE_READY 5
  35          
  36          #define STATE_IDLE 0
  37          #define STATE_INIT 1
  38          #define STATE_BUSY 2
  39          
  40          #define CMD_NONE 0
  41          #define CMD_STOP 1
  42          #define CMD_GO_UP 2
  43          #define CMD_GO_DOWN 3
  44          #define CMD_GO_MAX 4
  45          #define CMD_GO_MIN 5
  46          #define CMD_GO_VALUE 6
  47          
  48          #define CMD_STAGE_NONE 0
  49          #define CMD_STAGE_UP 1
  50          #define CMD_STAGE_UP_ADJUST 2
  51          #define CMD_STAGE_UP_LIMIT 3
  52          #define CMD_STAGE_DOWN 4
  53          #define CMD_STAGE_DOWN_ADJUST 5
  54          #define CMD_STAGE_DOWN_LIMIT 6
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2023 17:04:03 PAGE 2   

  55          
  56          void main() {
  57   1        RZ7899_Init();
  58   1      
  59   1        OLED_Init();
  60   1        OLED_ShowString8(0, 0, "START");
  61   1        
  62   1        // RZ7899_Run(RUN_STATE_INV);
  63   1        // while(1);
  64   1        
  65   1        RotationCounter_init();
  66   1        
  67   1        g_state = STATE_INIT;
  68   1        g_initStage = INITSTAGE_NONE;
  69   1        g_CMD = CMD_NONE;
  70   1        g_CMD_Stage = CMD_STAGE_NONE;
  71   1        
  72   1        // Test_All();
  73   1        
  74   1        while(1) {
  75   2          int rc;
  76   2          char str[20];
  77   2          u16 adc;
  78   2          float r;
  79   2          
  80   2          OLED_Clear();
  81   2      
  82   2          Interrupt_check();
  83   2          RotationCounter_check();
  84   2          CMD_Check();
  85   2      
  86   2          rc = RotationCounter_getRotationCount();
  87   2          intToS(rc, str, 20);
  88   2          // adc = Get_ADCResult(ADC_CHANEL);
  89   2          // r = adc / 4096.f * 100.f;
  90   2          // floatToS(r, str, 20);
  91   2          // sprintf(str, "maxcount = %d", g_MaxCount);
  92   2          
  93   2          OLED_ShowString8(0, 3, str);
  94   2          
  95   2          switch (g_state) {
  96   3            case STATE_INIT: {
  97   4              StateInit_check();
  98   4              if (g_initStage == INITSTAGE_READY) {
  99   5                g_state = STATE_IDLE;
 100   5              }
 101   4              break;
 102   4            }
 103   3            case STATE_IDLE: {
 104   4              if (g_CMD != CMD_NONE) {
 105   5                g_state = STATE_BUSY;
 106   5                CMD_Work();
 107   5              }
 108   4              break;
 109   4            }
 110   3            case STATE_BUSY: {
 111   4              CMD_Work();
 112   4              break;
 113   4            }
 114   3            default:
 115   3              break;
 116   3          }
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2023 17:04:03 PAGE 3   

 117   2          Test_Interruption_Check(5);
 118   2        }
 119   1      }
*** WARNING C280 IN LINE 77 OF src\main.c: 'adc': unreferenced local variable
*** WARNING C280 IN LINE 78 OF src\main.c: 'r': unreferenced local variable
 120          
 121          void INT_Init() {
 122   1        GPIO_InitTypeDef conf;
 123   1        GPIO_InitTypeDef conf1;
 124   1        conf.Mode = GPIO_PullUp;
 125   1        conf.Pin = GPIO_Pin_4;
 126   1        GPIO_Inilize(GPIO_P5, &conf);
 127   1        P_INT = 1;
 128   1        gIsInInt = 0;
 129   1      
 130   1        conf1.Mode = GPIO_PullUp;
 131   1        conf1.Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 132   1        GPIO_Inilize(GPIO_P0, &conf);
 133   1        P_INT = 1;
 134   1        
 135   1        P_INT_01 = 1;
 136   1        P_INT_02 = 1;
 137   1        P_INT_03 = 1;
 138   1        P_INT_04 = 1;
 139   1        P_INT_05 = 1;
 140   1        P_INT_06 = 1;
 141   1        P_INT_07 = 1;
 142   1      }
 143          
 144          void Interrupt_check() {
 145   1        if (!P_INT && !gIsInInt) {
 146   2          gIntFlag = 1;
 147   2          gIsInInt = 1;
 148   2        }
 149   1        if (gIsInInt && P_INT) {
 150   2          gIsInInt = 0;
 151   2          gIntFlag = 0;
 152   2        }
 153   1      }
 154          
 155          bit IsInterrupted(bit clearFlag) {
 156   1        bit res = gIntFlag;
 157   1        if (clearFlag) {
 158   2          gIntFlag = 0;
 159   2        }
 160   1        return res;
 161   1      }
 162          
 163          void StateInit_check() {
 164   1        switch (g_initStage) {
 165   2          case INITSTAGE_NONE: {
 166   3            OLED_ShowString8(0, 2, "INITSTAGE_NONE");
 167   3            RZ7899_Run(RUN_STATE_INV);
 168   3            g_initStage = INITSTAGE_TO_MIN;
 169   3            break;
 170   3          }
 171   2          case INITSTAGE_TO_MIN: {
 172   3            OLED_ShowString8(0, 2, "INITSTAGE_TO_MIN");
 173   3            if (IsInterrupted(0)) {
 174   4              RZ7899_Run(RUN_STATE_NORM);
 175   4              g_initStage = INITSTAGE_TO_MIN_START;
 176   4            }
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2023 17:04:03 PAGE 4   

 177   3            break;
 178   3          }
 179   2          case INITSTAGE_TO_MIN_START: {
 180   3            OLED_ShowString8(0, 2, "INITSTAGE_TO_MIN_START");
 181   3            if (!IsInterrupted(0)) {
 182   4              RotationCounter_reset();
 183   4              g_initStage = INITSTAGE_TO_MAX;
 184   4            }
 185   3            break;
 186   3          }
 187   2          case INITSTAGE_TO_MAX: {
 188   3            OLED_ShowString8(0, 2, "INITSTAGE_TO_MAX");
 189   3            if (IsInterrupted(0)) {
 190   4              RZ7899_Run(RUN_STATE_INV);
 191   4              g_initStage = INITSTAGE_TO_START;
 192   4            }
 193   3            break;
 194   3          }
 195   2          case INITSTAGE_TO_START: {
 196   3            OLED_ShowString8(0, 2, "INITSTAGE_TO_START");
 197   3            if (!IsInterrupted(0)) {
 198   4              RZ7899_Run(RUN_STATE_STOP);
 199   4              g_initStage = INITSTAGE_READY;
 200   4              g_MaxCount = RotationCounter_getRotationCount();
 201   4            }
 202   3            break;
 203   3          }
 204   2          case INITSTAGE_READY: {
 205   3            OLED_ShowString8(0, 2, "INITSTAGE_READY");
 206   3            break;
 207   3          }
 208   2        }
 209   1      }
 210          
 211          void CMD_Check() {
 212   1        if (!P_INT_01) {
 213   2          P_INT_01 = 1;
 214   2          P_INT_02 = 1;
 215   2          P_INT_03 = 1;
 216   2          P_INT_04 = 1;
 217   2          P_INT_05 = 1;
 218   2          P_INT_06 = 1;
 219   2          P_INT_07 = 1;
 220   2          g_CMD = CMD_STOP;
 221   2          OLED_ShowString8(0, 4, "01 INT");
 222   2        } else if (!P_INT_02) {
 223   2          OLED_ShowString8(0, 4, "02 INT");
 224   2          g_CMD = CMD_GO_UP;
 225   2        } else if (!P_INT_03) {
 226   2          OLED_ShowString8(0, 4, "03 INT");
 227   2          g_CMD = CMD_GO_DOWN;
 228   2        } else if (!P_INT_04) {
 229   2          OLED_ShowString8(0, 4, "04 INT");
 230   2          g_CMD = CMD_GO_MAX;
 231   2        } else if (!P_INT_05) {
 232   2          OLED_ShowString8(0, 4, "05 INT");
 233   2          g_CMD = CMD_GO_MIN;
 234   2        } else if (!P_INT_06) {
 235   2          OLED_ShowString8(0, 4, "06 INT");
 236   2          g_CMD = CMD_GO_VALUE;
 237   2          g_CMD_Value = 50;
 238   2        } else if (!P_INT_07) {
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2023 17:04:03 PAGE 5   

 239   2          OLED_ShowString8(0, 4, "07 INT");
 240   2          g_CMD = CMD_GO_VALUE;
 241   2          g_CMD_Value = 20;
 242   2        } else {
 243   2          OLED_ShowString8(0, 4, "NO INT");
 244   2        }
 245   1      }
 246          
 247          void CMD_Work() {
 248   1        switch (g_CMD) {
 249   2          case CMD_NONE: {
 250   3            OLED_ShowString8(0, 2, "CMD_NONE");
 251   3            g_state = STATE_IDLE;
 252   3            g_CMD_Stage = CMD_STAGE_NONE;
 253   3            break;
 254   3          }
 255   2          case CMD_STOP: {
 256   3            OLED_ShowString8(0, 2, "CMD_STOP");
 257   3            RZ7899_Run(RUN_STATE_STOP);
 258   3            g_state = STATE_IDLE;
 259   3            g_CMD = CMD_NONE;
 260   3            g_CMD_Stage = CMD_STAGE_NONE;
 261   3            break;
 262   3          }
 263   2          case CMD_GO_UP:
 264   2          case CMD_GO_MAX: {
 265   3            OLED_ShowString8(0, 2, "CMD_GO_UP OR MAX");
 266   3            if (g_CMD_Stage != CMD_STAGE_UP && g_CMD_Stage == CMD_STAGE_NONE) {
 267   4              RZ7899_Run(RUN_STATE_NORM);
 268   4              g_CMD_Stage = CMD_STAGE_UP;
 269   4            }
 270   3            if (g_CMD_Stage == CMD_STAGE_UP && IsInterrupted(0)) {
 271   4              RZ7899_Run(RUN_STATE_INV);
 272   4              g_CMD_Stage = CMD_STAGE_UP_ADJUST;
 273   4            }
 274   3            if (g_CMD_Stage == CMD_STAGE_UP_ADJUST && !IsInterrupted(0)) {
 275   4              RZ7899_Run(RUN_STATE_STOP);
 276   4              g_CMD_Stage = CMD_STAGE_UP_LIMIT;
 277   4              if (g_CMD == CMD_GO_MAX) {
 278   5                g_CMD = CMD_STOP;
 279   5                g_CMD_Stage = CMD_STAGE_NONE;
 280   5              }
 281   4            }
 282   3            if (g_CMD == CMD_GO_UP && P_INT_02) {
 283   4              g_CMD = CMD_STOP;
 284   4              g_CMD_Stage = CMD_STAGE_NONE;
 285   4            }
 286   3            break;
 287   3          }
 288   2          case CMD_GO_DOWN:
 289   2          case CMD_GO_MIN:{
 290   3            OLED_ShowString8(0, 2, "CMD_GO_DOWN OR MIN");
 291   3            if (g_CMD_Stage != CMD_STAGE_DOWN && g_CMD_Stage == CMD_STAGE_NONE) {
 292   4              RZ7899_Run(RUN_STATE_INV);
 293   4              g_CMD_Stage = CMD_STAGE_DOWN;
 294   4            }
 295   3            if (g_CMD_Stage == CMD_STAGE_DOWN && IsInterrupted(0)) {
 296   4              RZ7899_Run(RUN_STATE_NORM);
 297   4              g_CMD_Stage = CMD_STAGE_DOWN_ADJUST;
 298   4            }
 299   3            if (g_CMD_Stage == CMD_STAGE_DOWN_ADJUST && !IsInterrupted(0)) {
 300   4              RZ7899_Run(RUN_STATE_STOP);
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2023 17:04:03 PAGE 6   

 301   4              g_CMD_Stage = CMD_STAGE_DOWN_LIMIT;
 302   4              if (g_CMD == CMD_GO_MIN) {
 303   5                g_CMD = CMD_STOP;
 304   5                g_CMD_Stage = CMD_STAGE_NONE;
 305   5              }
 306   4            }
 307   3            if (g_CMD == CMD_GO_DOWN && P_INT_03) {
 308   4              g_CMD = CMD_STOP;
 309   4              g_CMD_Stage = CMD_STAGE_NONE;
 310   4            }
 311   3            break;
 312   3          }
 313   2          case CMD_GO_VALUE: {
 314   3            OLED_ShowString8(0, 2, "CMD_GO_VALUE");
 315   3            break;
 316   3          }
 317   2        }
 318   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    845    ----
   CONSTANT SIZE    =    236    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
