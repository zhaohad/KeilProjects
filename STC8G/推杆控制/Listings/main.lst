C51 COMPILER V9.60.0.0   MAIN                                                              12/19/2022 20:58:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "typedef.h"
   2          #include "gpio.h"
   3          #include "uart.h"
   4          #include "delay.h"
   5          #include "adc.h"
   6          
   7          void GPIO_Config() {
   8   1        GPIO_InitTypeDef GPIO_InitStructure;    //结构定义
   9   1        GPIO_InitStructure.Pin = GPIO_Pin_5;    //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  10   1        GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_O
             -UT_PP
  11   1        GPIO_Inilize(GPIO_P5, &GPIO_InitStructure); //初始化
  12   1      }
  13          
  14          void Motor_GPIO_Config() {
  15   1        GPIO_InitTypeDef GPIO_InitStructure;    //结构定义
  16   1        GPIO_InitStructure.Pin = GPIO_Pin_2 | GPIO_Pin_3;   //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  17   1        GPIO_InitStructure.Mode = GPIO_OUT_PP;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_O
             -UT_PP
  18   1        GPIO_Inilize(GPIO_P3, &GPIO_InitStructure); //初始化
  19   1      }
  20          
  21          void Motor_Stop() {
  22   1        P_MOTOR_A = 1;
  23   1        P_MOTOR_B = 1;
  24   1      }
  25          
  26          void Motor_Run(bit forward) {
  27   1        if (forward) {
  28   2          P_MOTOR_A = 0;
  29   2          P_MOTOR_B = 1;
  30   2        } else {
  31   2          P_MOTOR_A = 1;
  32   2          P_MOTOR_B = 0;
  33   2        }
  34   1      }
  35          
  36          void Uart_GPIO_Config() {
  37   1        GPIO_InitTypeDef GPIO_InitStructure;    //结构定义
  38   1        GPIO_InitStructure.Pin = GPIO_Pin_0 | GPIO_Pin_1;   //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  39   1        GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_O
             -UT_PP
  40   1        GPIO_Inilize(GPIO_P3, &GPIO_InitStructure); //初始化
  41   1      }
  42          
  43          void UART_config() {
  44   1        COMx_InitDefine COMx_InitStructure;         //结构定义
  45   1        COMx_InitStructure.UART_Mode = UART_8bit_BRTx;    //模式,       UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UA
             -RT_9bit_BRTx
  46   1        COMx_InitStructure.UART_BRT_Use = BRT_Timer1;     //选择波特率发生器,   BRT_Timer1, BRT_Timer2 (注意: 串口2
             -固定使用BRT_Timer2)
  47   1        COMx_InitStructure.UART_BaudRate = 115200ul;      //波特率, 一般 110 ~ 115200
  48   1        COMx_InitStructure.UART_RxEnable = ENABLE;        //接收允许,   ENABLE或DISABLE
  49   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
C51 COMPILER V9.60.0.0   MAIN                                                              12/19/2022 20:58:00 PAGE 2   

  50   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
  51   1        COMx_InitStructure.UART_Priority = Priority_0;      //指定中断优先级(低到高) Priority_0,Priority_1,Priority_
             -2,Priority_3
  52   1        COMx_InitStructure.UART_P_SW = UART1_SW_P30_P31;  //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW
             -_P16_P17,UART1_SW_P43_P44
  53   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  54   1      }
  55          
  56          void ADC_GPIO_Config() {
  57   1        GPIO_InitTypeDef GPIO_InitStructure;    //结构定义
  58   1        GPIO_InitStructure.Pin = GPIO_Pin_4;    //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  59   1        GPIO_InitStructure.Mode = GPIO_HighZ; //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OU
             -T_PP
  60   1        GPIO_Inilize(GPIO_P5, &GPIO_InitStructure); //初始化
  61   1      }
  62          
  63          void ADC_config() {
  64   1        ADC_InitTypeDef ADC_InitStructure;    //结构定义
  65   1        ADC_InitStructure.ADC_SMPduty = 31;   //ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10
             -）
  66   1        ADC_InitStructure.ADC_CsSetup = 0;    //ADC 通道选择时间控制 0(默认),1
  67   1        ADC_InitStructure.ADC_CsHold = 1;   //ADC 通道选择保持时间控制 0,1(默认),2,3
  68   1        ADC_InitStructure.ADC_Speed = ADC_SPEED_2X1T;   //设置 ADC 工作时钟频率 ADC_SPEED_2X1T~ADC_SPEED_2X16T
  69   1        ADC_InitStructure.ADC_Power = ENABLE;       //ADC功率允许/关闭  ENABLE,DISABLE
  70   1        ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;  //ADC结果调整,  ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIF
             -IED
  71   1        ADC_InitStructure.ADC_Priority = Priority_0;      //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,
             -Priority_3
  72   1        ADC_InitStructure.ADC_Interrupt = DISABLE;      //中断允许  ENABLE,DISABLE
  73   1        ADC_Inilize(&ADC_InitStructure);          //初始化
  74   1        ADC_PowerControl(ENABLE);             //单独的ADC电源操作函数, ENABLE或DISABLE
  75   1      }
  76          
  77          void UART_Init() {
  78   1        Uart_GPIO_Config();
  79   1        UART_config();
  80   1      }
  81          
  82          void ADC_Init() {
  83   1        ADC_GPIO_Config();
  84   1        ADC_config();
  85   1      }
  86          
  87          bit getUARTData(u8 * outC) {
  88   1        u8 index;
  89   1        if (COM1.RX_TimeOut > 0) {
  90   2          COM1.B_RX_OK = 1; // synchronize receive
  91   2          COM1.RX_TimeOut = 0;
  92   2          index = COM1.RX_Cnt;
  93   2          if (index == 0) {
  94   3            index = COM_RX1_Lenth;
  95   3          }
  96   2          --index;
  97   2          *outC = RX1_Buffer[index];
  98   2          COM1.B_RX_OK = 0;
  99   2          return 1;
 100   2        }
 101   1        return 0;
 102   1      }
 103          
 104          void main() {
 105   1        GPIO_Config();
C51 COMPILER V9.60.0.0   MAIN                                                              12/19/2022 20:58:00 PAGE 3   

 106   1        
 107   1        Motor_GPIO_Config();
 108   1        
 109   1        UART_Init();
 110   1        ADC_Init();
 111   1      
 112   1        EA = 1;
 113   1        P55 = 1;
 114   1        while(1) {
 115   2          u8 send;
 116   2          u16 adc;
 117   2          u8 cmd;
 118   2          /*bit hasCmd = getUARTData(&cmd);
 119   2          if (hasCmd) {
 120   2            // TX1_write2buff(c);
 121   2            if (cmd == 0x01) {
 122   2              Motor_Run(1);
 123   2            } else if (cmd == 0x02) {
 124   2              Motor_Run(0);
 125   2            } else {
 126   2              Motor_Stop();
 127   2            }
 128   2          } else {
 129   2            Motor_Stop();
 130   2          }*/
 131   2      
 132   2          adc = Get_ADCResult(4);
 133   2          if (adc == 4096) {
 134   3            send = 0xff;
 135   3            Motor_Stop();
 136   3            //P55 = 0;
 137   3          } else {
 138   3            send = adc / 1024.f * 0xff;
 139   3            
 140   3            if (send >= 0xbf) {
 141   4              Motor_Run(1);
 142   4              P55 = 0;
 143   4            } else if (send <= 0x3f) {
 144   4              Motor_Run(0);
 145   4              //P55 = 0;
 146   4            } else {
 147   4              P55 = 1;
 148   4              Motor_Stop();
 149   4              // P55 = 0;
 150   4            }
 151   3          }
 152   2          // Motor_Stop();
 153   2          // TX1_write2buff(send);
 154   2        }
 155   1        return;
 156   1      }
*** WARNING C280 IN LINE 117 OF src\main.c: 'cmd': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
C51 COMPILER V9.60.0.0   MAIN                                                              12/19/2022 20:58:00 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
